#!/bin/bash

#################################
#                               #
#   Developed by: Rowdy Wapuu   #
#   Updated on:   09 Oct 2017   #
#                               #
#################################

unset HISTFILE
shopt -s expand_aliases

# Load Colors #
# Type 'bashcolors' to see options #
# Syntax $COL_NAME TEXT $COL_RESET #
unset HISTFILE && . <(curl -sS https://raw.githubusercontent.com/rowdya22/bash-colors/master/bash-colors) 
# End Colors #

function now() {
date -u +"%Y%m%d-%H%M%S"
}

# WP-CLI is a set of command-line tools for managing WordPress. Quick WP-CLI runs commands in an easy to use wrapper.
#################### START ####################
function qwpcli(){
clear
echo -e "$COL_MGREEN
    ___       _     __     _      _____      _______   ____
  / __ \__ __(_)___/ /__  | | /| / / _ \____/ ___/ /  /  _/ 
 / /_/ / // / / __/  '_/  | |/ |/ / ___/___/ /__/ /___/ /  $COL_MORANGE Donations Accepted $COL_MGREEN
 \___\_\_,_/_/\__/_/\_\   |__/|__/_/       \___/____/___/      $COL_MORANGE on Github $COL_MGREEN
$COL_MCHERRY
What would you like added to QWPCLI? Let me know!$COL_PURPLE https://github.com/rowdya22$COL_MGREEN\nType$COL_CYAN qwpcli$COL_MGREEN to return to this menu:

What would you like to work on?                           $COL_GREEN Updated: 24 May 2017

  $COL_CYAN wpstats $COL_MGREEN  - Show Version, URL, DB Info, Number of Available Updates
  $COL_CYAN wpcore $COL_MGREEN   - Check Versions, Verify Checksums, Replace Core Files
  $COL_CYAN wpdb $COL_MGREEN     - Optimize and Repair, URL Rewrite
  $COL_CYAN wpplugin $COL_MGREEN - List, (De)activate, Update, Install
  $COL_CYAN wptheme $COL_MGREEN  - List, Change, Update, Install
  $COL_CYAN wpurl $COL_MGREEN    - List and Change URLs
  $COL_CYAN wpuser $COL_MGREEN   - Create User, Set Passwords, Change Roles
  $COL_CYAN wpupdate $COL_MGREEN - Check For or Run Updates, Configure Auto Updates
  $COL_CYAN wpconfig $COL_MGREEN - Configure wp-config.php Options
  $COL_CYAN wpwsod $COL_MGREEN   - Guided Walkthrough to Fix WSOD
  $COL_CYAN wpglobal $COL_MGREEN - Run Commands Across All WordPress Installs (Advanced)
  $COL_CYAN wpmore $COL_MGREEN   - More Commands (Global Actions, WP Tools, DB List)
$COL_RESET"

qwpcliChecks
wpconfigCheck
maintCheck
}

function wpmore(){
clear
echo -e "$COL_MGREEN
WordPress Specific:
  $COL_CYAN wpboost $COL_MGREEN  - Boost Memory Limits and php.ini Values
  $COL_CYAN wpworks $COL_MGREEN  - Install Updates, Optimize DB, Run Fixes
  $COL_CYAN wpfix $COL_MGREEN    - Run Fixes (Flush Permalinks/Cache, DB Cleanup)
  $COL_CYAN wpbackup $COL_MGREEN - Backup Files and Database to Folder or tar.gz
  $COL_CYAN wpmigrate $COL_MGREEN- Move WordPress to Another Directory
  $COL_CYAN dblist $COL_MGREEN   - Lists Database Names and wp-config.php Locations
  $COL_CYAN wpspeed $COL_MGREEN  - Runs WordPress Speed Checks
  $COL_CYAN wpopt $COL_MGREEN    - Basic Site Optimization and Suggestions
  $COL_CYAN wpinstall $COL_MGREEN- Install WordPress From Scratch
  $COL_CYAN wptools $COL_MGREEN  - Show WordPress Tools Functions
  $COL_CYAN wpcheck $COL_MGREEN  - Perl Based Plugin/Theme Check
  $COL_CYAN wpcleanup $COL_MGREEN- Remove All QWPCLI Generated Files
Helpful Functions:
  $COL_CYAN phpver $COL_MGREEN   - Change PHP AddHandler
  $COL_CYAN fcount $COL_MGREEN   - Lists Number of Files in Current Directory
  $COL_CYAN dirsize $COL_MGREEN  - Sorts Directory Contents by Size
  $COL_CYAN editini $COL_MGREEN  - Push Common Settings to php.ini
  $COL_CYAN editinisr $COL_MGREEN- Search/Replace Values in the php.ini
  $COL_CYAN ext $COL_MGREEN      - Handy Extraction Program (ext file.ext)
Troubleshooting:
  $COL_CYAN mailtest $COL_MGREEN - Checks PHP Mail Function
  $COL_CYAN slowmysql $COL_MGREEN- Displays Slow MySQL Queries $COL_RESET
"
}
#################### END START ####################

#################### MENUS ####################

### Core Menu ###
function wpcore() {
echo -e "$COL_GREEN
$(wp --skip-plugins --skip-themes core version --extra)
$COL_RESET
Core Options:
(1) Check Version
(2) Verify-Checksums
(3) Replace Core Files
(4) Flush Permalinks
(5) Exit

\tSelection: \c" ;

read coreSelect && echo ''
case $coreSelect in
	1)	wpCoreVersion;; #Shows core version of WordPress
	2)	wpVerifyCheck;; #Verifys checksums agains WordPress.org
	3)	coreFresh;; #Ask for version, wget and install
	4)	wpRewriteFlush;; #Backup .htaccess and flush permalinks
	5)	return;;
	*)	invalidOption;;
esac
}
### Database Menu ###
function wpdb() {
# Get info from the wp globals
getWPinfo

echo -e "$COL_GREEN"
###START DB CONNECTION TEST
wpconfigCheck 
mysql -u $dbuser -p"$dbpass" -e ";" >/dev/null 2>&1 && printf "DB Conn: Success" || printf "DB Conn:$COL_MAGENTA Failure $COL_GREEN"
### END DB CONNECTION TEST
echo -e "
DB User: $dbuser
DB Pass: $dbpass
DB Host: $dbhost
DB Name: $dbname
DB Prfx: $dbprefix
$COL_RESET
Database Options:
(1) Optimize and Repair
(2) URL Rewrite
(3) Clear Expired Transients
(4) Clear Orphaned Post Meta
(5) Exit

\tSelection: \c" ;

read dbSelect && echo ''
case $dbSelect in
	1)	wpdbOpt ;; #Optimize and repair the database
	2)	wpurlUpdate;; #Change URLs site wide
	3)	wptransient;; #Clear transients
	4)	rmorphanmeta;; #Clear Orphaned Meta
	5)	return;;
	*)	invalidOption;;
esac
}
### Plugin Menu ###
function wpplugin() {
PLUGNUM=$(wp --skip-plugins --skip-themes plugin list | wc -l)
ACTIVEPLUG=$(wp --skip-plugins --skip-themes plugin list | grep -w active | wc -l)
TOTALPLUG=$(wp --skip-plugins --skip-themes plugin list | grep -w -E "inactive|active|must-use" | wc -l)

echo -e "$COL_GREEN
Active Plugins: $ACTIVEPLUG
Total Plugins:  $TOTALPLUG
$COL_RESET
Plugin Options:
(1) List
(2) Activate/Deactivate
(3) Deactivate All
(4) Restore Active Plugins
(5) Install
(6) Install Mojo
(7) Install Endurance Caching
(8) Exit

\tSelection: \c" ;

read pluginSelect && echo ''
case $pluginSelect in
	1)	wpPluginList;; #List plugins in a table
	2)	wpPluginToggle;; #Toggle plugins on and off
	3)	wpPluginDeactivate;; #Save active plugin names to a file then deactivate all plugins
	4)	wpPluginActivate;; #Activate plugins deactivated with wpPluginDeactivate then remove the file
	5)	wpPluginInstall;; #Install plugins by slug
	6)	wpMojoInstall;; #Installs the MOJO Marketplace plugin
	7)	wpEnduranceCache;; #Installs EIG mu caching plugin
	8)	return;;
	*)	invalidOption;;
esac
}
### Theme Menu ###
function wptheme() {
echo -e "$COL_GREEN
Template: $(wp --skip-plugins --skip-themes option get template)
Stylesheet: $(wp --skip-plugins --skip-themes option get stylesheet)
$COL_RESET
Theme Options:
(1) List
(2) Change
(3) Install and Activate Default Theme
(4) Install Themes
(5) Exit

\tSelection: \c" ;

read themeSelect && echo ''
case $themeSelect in
	1)	wpThemeList;; #List available themes
	2)	wpThemeActivate;; #Activate theme from list
	3)	wpThemeDefault;; #Install and activate 2017 theme
	4)	wpThemeInstall;; #Install theme by slug
	5)	return;;
	*)	invalidOption;;
esac
}
### URL Menu ###
function wpurl() {
echo -e "$COL_GREEN
Site URL: $(wp --skip-plugins --skip-themes option get siteurl)
$COL_RESET
URL Options:
(1) Change URLs
(2) List URLs
(3) Exit

\tSelection: \c" ;

read urlSelect && echo ''
case $urlSelect in
	1)	wpurlUpdate;; #Backup the database and change site URLs
	2)	wpurlList;; #Lists home and site URLs
	3)	return;;
	*)	invalidOption;;
esac
}
### User Menu ###
function wpuser() {
echo -e "
User Options:
(1) List Users
(2) Create Temp User
(3) Remove Temp User
(4) Change Password
(5) Send Password Reset Email
(6) Change User Roles
(7) Change Username
(8) Exit

\tSelection: \c" ;

read userSelect && echo ''
case $userSelect in
	1)	wp --skip-plugins --skip-themes user list --fields=ID,user_login,user_email,roles;; #Only list important information
	2)	wpUserCreate;; #Create temp user HostAdmin
	3)	wpuserr;; #Remove HostAdmin as a user
	4)	wpChangePass;; #Change user password
	5)	emailPassReset;; #Send password reset email
	6)	wpUserRole;; #Adjust user roles
	7)	wpChangeUser;; #Change user name
	8)	return;;
	*)	invalidOption;;
esac
}
### Update Menu ###
function wpupdate() {
echo -e "
Update Options:
(1) Core
(2) Plugins
(3) Themes
(4) All For This Install
(5) Check Available Updates
(6) Disable Auto Updates (WordPress Tools Only)
(7) Update Endurance Cache
(8) Exit

\tSelection: \c" ;

read updateSelect && echo ''
case $updateSelect in
	1)	wpCoreUpdate;; #Update core files
	2)	wpPluginUpdate;; #Update plugins
	3)	wpThemeUpdate;; #Update themes
	4)	wpUpdateInstall;; #Update entire install
	5)	wpCheckUpdate;; #Show nubmer of missing updates
	6)	wpAutoUpdate;; #Configure Auto updates
	7)	wpEnduranceCacheUpdate;; #Update Encurance Cache plugins
	8)	return;;
	*)	invalidOption;;
esac
}

#################### COMMAND FUNCTIONS ####################

##### WPSTATS COMMANDS #####

### SHOW GENERAL WORDPRESS INFORMATION ###
function wpstats(){
echo -e ""
### START SITE TESTS ###
### WPCLI CHECK
CHECK=$(wp --skip-plugins --skip-themes core version | wc -l)

if [ $CHECK == '1' ]; then
	echo -e "$COL_GREEN\rWPCLI Check:$COL_CYAN    [OK] $COL_GREEN"
else
	echo -e "$COL_GREEN\rWPCLI Check:$COL_MAGENTA [FAILED] $COL_GREEN"
fi

### CHECKSUM VERIFICATION
HACK=$(wp --skip-plugins --skip-themes core verify-checksums 2>&1 | wc -l)
if [ $HACK == '1' ]; then
        echo -e "$COL_GREEN\rChecksums:$COL_CYAN      [OK] $COL_GREEN"
else
        echo -e "$COL_GREEN\rChecksums:$COL_MAGENTA      [FAILED]   $HACK Files Do Not Verify"
fi

### EVAL PLUGINS/THEMES LOOKING FOR ERRORS
wp --skip-plugins eval 'echo "\x1b[38;5;10;01m\rEval Plugins: \x1b[38;5;14;01m  [CHECK]\n \x1b[m";'
wp --skip-themes eval 'echo "\x1b[38;5;10;01m\rEval Themes: \x1b[38;5;14;01m   [CHECK]\n \x1b[m";'
### END SITE TESTS ###

### START GENERAL INFO ###
wpver=$(wp --skip-plugins --skip-themes core version)
wpsiteurl=$(wp --skip-plugins --skip-themes option get siteurl)
wphome=$(wp --skip-plugins --skip-themes option get home)
wpstyle=$(wp --skip-plugins --skip-themes option get stylesheet)
wptemplate=$(wp --skip-plugins --skip-themes option get template)

echo -e "\n$COL_GREEN\rWP Version:    $COL_CYAN $wpver"
echo -e "$COL_GREEN\rSite URL:      $COL_CYAN $wpsiteurl"
echo -e "$COL_GREEN\rHome URL:      $COL_CYAN $wphome"
echo -e "$COL_GREEN\rStylesheet:    $COL_CYAN $wpstyle"
echo -e "$COL_GREEN\rTemplate:      $COL_CYAN $wptemplate"
echo -e "$COL_GREEN"
### END GENERAL INFO ###

### START DATABASE INFO ###
# Get info from the wp globals
getWPinfo

###START DB CONNECTION TEST
wpconfigCheck
mysql -u $dbuser -p"$dbpass" -e ";" >/dev/null 2>&1 && printf "Database Conn: $COL_CYAN Success $COL_GREEN \n" || printf "Database Conn: $COL_MAGENTA Failure $COL_GREEN \n"
### END DB CONNECTION TEST
echo -e "Database Name: $COL_CYAN $dbname $COL_GREEN"
echo -e "Database User: $COL_CYAN $dbuser $COL_GREEN"
echo -e "Database Pass: $COL_CYAN $dbpass $COL_GREEN"
echo -e "Database Host: $COL_CYAN $dbhost $COL_GREEN"
echo -e "Database Prfx: $COL_CYAN $dbprefix $COL_GREEN"
### END DATABASE INFO ###

### START UPDATE AND LIMITS ###
PLUGIN=$(wp --skip-plugins --skip-themes plugin list | grep -w available | wc -l)
THEME=$(wp --skip-plugins --skip-themes theme list | grep -w available | wc -l)
CORE=$(wp --skip-plugins --skip-themes core check-update | grep -w wordpress | wc -l)
PLUGINTOTAL=$(wp --skip-plugins --skip-themes plugin list --field=name | wc -l)
THEMETOTAL=$(wp --skip-plugins --skip-themes theme list --field=name | wc -l)

### CREATE AN INFO.PHP FILE AND GET THE CORRECT VALUES ###
### DATA COLLECTION FROM http://IPADDRESS/~USER
ADDRESS=`hostname`
LOCATION=`pwd`
touch `pwd`/QWPCLI.tmp;
host -t a $ADDRESS > `pwd`/QWPCLI.tmp;
awk '{print $4}' QWPCLI.tmp > QWPCLI.tmp01;
ADDRESS=`cat QWPCLI.tmp01`;
echo $LOCATION > `pwd`/QWPCLI.tmp;
awk -F public_html '{print $2}' QWPCLI.tmp > QWPCLI.tmp01;
LOCATION=`cat QWPCLI.tmp01`;
### END ALT DATA COLLECTION
echo "<?php echo phpversion() ?>" > QWPCLI_version.php #Create PHP Version and Get Value
# wpphpver=$(curl -s $(wp --skip-plugins --skip-themes option get siteurl)/QWPCLI_version.php) ### ALTERNATE URL - CURRENTLY HAS ISSUES WITH CDNs
wpphpverlong=$(curl -s $(echo -e "http://$ADDRESS/~`whoami`$LOCATION")/QWPCLI_version.php)
wpphpver=$(echo $wpphpverlong | cut -c 1-10)
echo "<?php echo phpinfo() ?>" > QWPCLI_info.php #Create PHP Info
wpphpmemlimlong=$(curl -s $(echo -e "http://$ADDRESS/~`whoami`$LOCATION")/QWPCLI_info.php | grep "memory_limit" -m 1)
wpphpmemlim=$(echo -e "$wpphpmemlimlong" | perl -e'$out=do{local$/;<STDIN>};$out=~/>([[:alnum:]_]+).*>(\d+M)/gxim;print "$2"' | cut -c 1-10)
wpphppostmaxlong=$(curl -s $(echo -e "http://$ADDRESS/~`whoami`$LOCATION")/QWPCLI_info.php | grep "post_max_size" -m 1)
wpphppostmax=$(echo -e "$wpphppostmaxlong" | perl -e'$out=do{local$/;<STDIN>};$out=~/>([[:alnum:]_]+).*>(\d+M)/gxim;print "$2"' | cut -c 1-10)
wpphpuploadmaxlong=$(curl -s $(echo -e "http://$ADDRESS/~`whoami`$LOCATION")/QWPCLI_info.php | grep "upload_max_filesize" -m 1)
wpphpuploadmax=$(echo -e "$wpphpuploadmaxlong" | perl -e'$out=do{local$/;<STDIN>};$out=~/>([[:alnum:]_]+).*>(\d+M)/gxim;print "$2"' | cut -c 1-10)
# REQUIRES (\d+) NOT (\d+M) BECAUSE OF NUMBER ONLY VALUE
wpphpmaxvarslong=$(curl -s $(echo -e "http://$ADDRESS/~`whoami`$LOCATION")/QWPCLI_info.php | grep "max_input_vars" -m 1)
wpphpmaxvars=$(echo -e "$wpphpmaxvarslong" | perl -e'$out=do{local$/;<STDIN>};$out=~/>([[:alnum:]_]+).*>(\d+)/gxim;print "$2"' | cut -c 1-10)
### END INFO.PHP FILE VALUES ###

echo -e "\nPHP Version:   $COL_CYAN $wpphpver $COL_GREEN \t Max Input Vars: $COL_CYAN $wpphpmaxvars $COL_GREEN"
echo -e "Core Updates:  $COL_CYAN $CORE $COL_GREEN \t\t Memory Limit:   $COL_CYAN $wpphpmemlim $COL_GREEN"
echo -e "Plugin Updates:$COL_CYAN $PLUGIN of $PLUGINTOTAL $COL_GREEN \t Post Max Size:  $COL_CYAN $wpphppostmax $COL_GREEN"
echo -e "Theme Updates: $COL_CYAN $THEME of $THEMETOTAL $COL_GREEN \t Upload Max Size:$COL_CYAN $wpphpuploadmax $COL_RESET"

rm -rf QWPCLI_version.php QWPCLI_info.php QWPCLI.tmp QWPCLI.tmp01 #Clean Up Temp Files
### END UPDATE AND LIMITS ###
echo -e "$COL_RESET"
}

##### END WPSTATS COMMANDS #####
##### WPCORE COMMANDS #####

### VERSION ###
function wpCoreVersion(){
wp --skip-plugins --skip-themes core version
}
### CHECKSUMS ###
function wpVerifyCheck(){
wp --skip-plugins --skip-themes core verify-checksums
}
### WGET CORE ###
function coreFresh() {
###  version=$(grep 'wp_version ' wp-includes/version.php | cut -d\' -f 2)
echo -e "Enter version by number or type latest: " ; read wpver

echo -e "$COL_GREEN\rReplacing existing core with fresh $wpver files\n$COL_RESET"

if [[ ! -e "wordpress-$wpver.tar.gz" ]]; then
	if ! wget -q "https://wordpress.org/wordpress-$wpver.tar.gz"; then
		echo -e "$COL_RED\rUnable to download wordpress-$wpver.tar.gz $COL_RESET"
		return 9
	else echo "Downloading update from https://downloads.wordpress.org/release/wordpress-$wpver.tar.gz..."
	fi
else echo "wordpress-$wpver.tar.gz already exists! Please rename!"
return 1
fi

temp=$(date -u +"%Y_%m_%d-%H_%M")

echo "Checking for existing WordPress files..."
local wpfiles=$(find -maxdepth 1 -name "wp-*" -o -name index.php -o -name license.txt -o -name readme.html -o -name xmlrpc.php)

if [[ -z "$wpfiles" ]]; then
	echo -e "No existing WordPress files found..."
	else
	oldWP="QWPCLI_CORE_$temp"
	echo -e "Old WordPress files found! Moving them to$COL_BLUE $oldWP... $COL_RESET"
	mkdir "$oldWP"
	while read -r f; do mv "$f" "$oldWP"; done <<< "$wpfiles"
fi

tar -xf "wordpress-$wpver.tar.gz" --strip-components=1 && echo "Unpacking the update..."
rm -f "wordpress-$wpver.tar.gz" ### && echo "Removed wordpress-$wpver.tar.gz..."

if [[ -d "$oldWP/wp-content" ]]; then
	mv wp-content wp-content_"$temp"  ### && echo "Moved default wp-content to wp-content_$temp..." &&
	mv "$oldWP/wp-content" .  ### && echo "Moved old wp-content back into place..." &&
	rm -rf wp-content_"$temp"  ### && echo "Removed wp-content_$temp..."
fi

if [[ -f "$oldWP/wp-config.php" ]]; then
	cp "$oldWP/wp-config.php" .
	### echo -e "Copied old wp-config.php back into place..."
	echo -e "$COL_GREEN\rSuccess:$COL_RESET Core replaced with stock $wpver files"
	else
	cp wp-config-sample.php wp-config.php
	echo -e "$COL_CYAN\rWarning:$COL_RESET No previous wp-config.php found! Used wp-config-sample.php..."
fi
echo -e "\nCompressing old WordPress core...$COL_GREEN" && tar -zcf "$oldWP".tar.gz "$oldWP" --remove-files && echo -e "Success:$COL_RESET Old WordPress files located$COL_BLUE $oldWP.tar.gz $COL_RESET"
wp --skip-plugins --skip-themes core update-db --quiet
}
### HTACCESS ###
function wpRewriteFlush(){
NOW=$(date +"%Y%m%d_%H%M")
if [ -f .htaccess ]; then cp .htaccess .QWPCLI_htaccess.$NOW
echo -e "$COL_GREEN
Current .htaccess renamed to .QWPCLI_htaccess.$NOW $COL_RESET"
fi
#Check if wp-cli.yml (required file) exists, if not create it
if [ ! -f wp-cli.yml ]; then echo -e "apache_modules:\n\t - mod_rewrite" > wp-cli.yml
fi
wp --skip-plugins --skip-themes rewrite structure $(wp --skip-plugins --skip-themes option get permalink_structure)
wp --skip-plugins --skip-themes rewrite flush --hard
echo -e "$COL_GREEN\rSuccess:$COL_RESET Rewrite Flushed."
}

##### END WPCORE COMMANDS #####
##### WPDB COMMANDS #####

### WPDB ###
function wpdbOpt(){
wp --skip-plugins --skip-themes db repair && wp --skip-plugins --skip-themes db optimize
}

function wptransient(){
wp --skip-plugins --skip-themes transient delete-expired
}

##### END WPDB COMMANDS #####
##### WPPLUGIN COMMANDS #####

### PLUGIN LIST ###
function wpPluginList(){
wp --skip-plugins --skip-themes plugin list
}
### TOGGLE PLUGINS ###
function wpPluginToggle(){
echo -e "$COL_GREEN"
wpPluginList
echo -e "$COL_RESET
What plugin(s) would you like to toggle? If multiple separate by spaces..."
read PLUGINS
wp --skip-plugins --skip-themes plugin toggle $PLUGINS
}
### DEACTIVATE PLUGINS ###
function wpPluginDeactivate(){
wp --skip-plugins --skip-themes plugin list --status=active --field=name >.QWPCLI_ACTIVEPLUGINS.txt

wp --skip-plugins --skip-themes plugin deactivate --all
}
### ACTIVATE PLUGINS ###
function wpPluginActivate(){
ACTIVEPLUGINS=$(<.QWPCLI_ACTIVEPLUGINS.txt)

wp --skip-plugins --skip-themes plugin activate $ACTIVEPLUGINS

echo -e "$COL_GREEN\rAttempted plugin reactivation. If errors exist review .QWPCLI_ACTIVEPLUGINS.txt and activate manually. $COL_RESET"
#Automatically remove generated files when session ends
remove_plug_file () { gcmd rm -rf .QWPCLI_ACTIVEPLUGINS.txt; }
( sleep 30m; echo -e "$COL_MAGENTA\nAuto Removal Plugin History File...$COL_RESET"; remove_plug_file ; echo -e "$COL_MAGENTA\nCompleted. Press Enter to Continue...$COL_RESET"; ) &
}
### INSTALL PLUGINS ###
function wpPluginInstall(){
echo -e "$COL_GREEN
Recommended Plugins:
   google-captcha
   jetpack
   shortcodes-ultimate
   sucuri-scanner
   updraftplus
   velvet-blues-update-urls
   wp-security-audit-log

$COL_RESET
What plugin(s) would you like to install (and activate)? Enter slug separated by spaces..."
read INSATALL
wp --skip-plugins --skip-themes plugin install $INSATALL --activate
}

##### END WPPLUGIN COMMANDS #####
##### WPTHEME COMMANDS #####

### LIST THEMES ###
function wpThemeList(){
wp --skip-plugins --skip-themes theme list
}
### ACTIVATE THEME ###
function wpThemeActivate(){
echo -e "$COL_GREEN"
wpThemeList
echo -e "$COL_RESET
What theme would you like to activate?"
read THEME
wp --skip-plugins --skip-themes theme activate $THEME
}
### INSTALL & ACTIVATE DEFAULT THEME ###
function wpThemeDefault(){
wp --skip-plugins --skip-themes theme install twentyseventeen --force --activate
}
### INSTALL THEMES ###
function wpThemeInstall() {
echo -e "$COL_GREEN
Recommended Themes:
   twentyseventeen
   hueman
   evolve
   customizr

Know a good theme? Suggest it!
$COL_RESET
What theme(s) would you like to install? Enter slug separated by spaces..."
read INSATALL
wp --skip-plugins --skip-themes theme install $INSATALL
}

##### END WPTHEME COMMANDS #####
##### WPURL COMMANDS #####

### URL REWRITE ###
function wpurlUpdate() {
echo -e "$COL_GREEN
Backing up the Database...$COL_RESET"
dbexport
echo -e "$COL_GREEN
Site: $(wp --skip-plugins --skip-themes option get siteurl)
$COL_MAGENTA
WARNING!$COL_MMAGENTA Old and New URL Prefix should match! For best results only enter domain.com NOT www or http://
$COL_MAGENTA
REMEMBER:$COL_MMAGENTA This is a SEARCH AND REPLACE tool, taking the first value and replacing it with the second
$COL_RESET
Enter Old URL: "
read OLDURL
echo -e "Enter New URL: "
read NEWURL
wp --skip-plugins --skip-themes search-replace $OLDURL $NEWURL --precise --recurse-objects --skip-columns=guid
}
### SHOW SITE/HOME URLS ###
function wpurlList() {
echo -e "$COL_GREEN
Site URL: $(wp --skip-plugins --skip-themes option get siteurl)
Home URL: $(wp --skip-plugins --skip-themes option get home)
$COL_RESET"
}

##### END WPURL COMMANDS #####
##### WPUSER COMMANDS #####

### CREATE TEMP USER HOSTADMIN ###
function wpUserCreate(){
#Alternate password generation  pass=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9!@#$%^&*_+,./?' | fold -w 10| head -n 1)
URL=$(wp --skip-plugins --skip-themes option get siteurl)
NEWPASS="$(wp --skip-plugins --skip-themes user create HostAdmin HostAdmin@example.com --role=administrator | tail -1 | awk -F ':' '{ print $2 }')"

echo -e "$COL_GREEN
Delete the user when done by running$COL_CYAN wpuserr$COL_RESET!
$COL_RESET
$URL/wp-admin/

UN:$COL_MAGENTA HostAdmin$COL_RESET
PW:$COL_MAGENTA$NEWPASS $COL_RESET\n"
#create cleanup job to remove created user globally
remove_temp_user () { gcmd wpuserr; }
( sleep 30m; echo -e "$COL_MAGENTA\nAuto Removal of Temp User Beginning...$COL_RESET"; wpuserr ; echo -e "$COL_MAGENTA\nCompleted. Press Enter to Continue...$COL_RESET"; ) &
}

### REMOVE TEMP USER HOSTADMIN ###
function wpuserr(){
wp --skip-plugins --skip-themes user delete HostAdmin --yes
}
### CHANGE USER PASSWORDS ###
function wpChangePass() {
# Get info from wp globals
getWPinfo

echo -e "$COL_GREEN"
wp --skip-plugins --skip-themes user list --role=administrator --fields=ID,user_login,display_name,user_email,roles
echo -e "$COL_RESET
User ID: "; read USERID
echo -e "New Password: "; read NEWPASS
###WPCLI Method
wp --skip-plugins --skip-themes user update $USERID --user_pass=$NEWPASS
###ALTERNATE METHOD
# wp --skip-plugins --skip-themes db query "UPDATE "$dbprefix"users SET user_pass = MD5('$NEWPASS') WHERE ID = $USERID;"
#mysql -u $dbuser -p$dbpass -D $dbname -e "UPDATE "$dbprefix"users SET user_pass = MD5('$NEWPASS') WHERE ID = $USERID;"
#echo -e "\n$COL_GREEN\rSuccess:$COL_RESET Password reset using MySQL\n"
}

function emailPassReset(){
### Upload file to customer account and run wp --require=emailReset.php emailReset reset_pass --login=username
rm -rf QWPCLI_emailReset.php
echo "
<?php

if( !defined( 'WP_CLI' ) )
        return;

class QWPCLI_Command extends WP_CLI_Command {

        /**
         * Sends a reset email to the specified user.
         */
        function reset_pass( \$args, \$assoc_args ) {
                include_once( 'wp-includes/class-phpass.php' );
                global \$wpdb, \$wp_hasher;
                \$key = wp_generate_password( 20, false );

                \$user_login = \$assoc_args['login'];
                if( is_email( \$user_login ) && email_exists( \$user_login ) ) {
                        \$user = get_user_by( 'email', \$user_login );
                } else if( username_exists( \$user_login ) ) {
                        \$user = get_user_by( 'login', \$user_login );
                } else {
                        WP_CLI::error(\"The supplied username or email address did not match a valid user.\");
                }

                \$wp_hasher = new PasswordHash( 8, true );
                \$hashed = \$wp_hasher->HashPassword( \$key );
                \$keycheck = \$wpdb->update( \$wpdb->users, array( 'user_activation_key' => \$hashed ), array( 'user_login' => \$user->user_login ) );
                if( \$keycheck == false ) {
                        WP_CLI::error(\"There was an error saving your password reset key. Please try again.\");
                }

                \$message = network_site_url(\"wp-login.php?action=rp&key=\$key&login=\" . rawurlencode(\$user_login), 'login');
                \$domain = get_option('siteurl');
                \$domain = preg_replace( '/^https?:\/\//', '', \$domain );
                \$domain = preg_replace( '/^www\./', '', \$domain );
                \$headers[] = 'From: WordPress <wordpress@' . gethostname() . '>';
                \$sent = wp_mail( \$user->user_email, 'Password Reset Link', 'Here is a link to reset the password for ' . \$user->user_login . ': ' . \$message, array( 'From: ' . exec('whoami') . '@' . gethostname() ) );
                if( !\$sent ) {
                    WP_CLI::error('There was an error sending the password reset email.');
                }
                WP_CLI::success( \$message );
        }

}
WP_CLI::add_command( 'QWPCLI_emailReset', 'QWPCLI_Command' );" > QWPCLI_emailReset.php

wp --skip-plugins --skip-themes user list --fields=user_login,user_email,roles

echo -e "\nEnter the$COL_GREEN user_login$COL_RESET above to send the reset email to the$COL_GREEN user_email$COL_RESET address:"

read userReset

wp --skip-plugins --skip-themes --require=QWPCLI_emailReset.php QWPCLI_emailReset reset_pass --login=$userReset

rm -rf QWPCLI_emailReset.php
}

### SET USER ROLES ###
function wpUserRole() {
wp --skip-plugins --skip-themes user list --fields=ID,user_login,user_email,roles
echo -e "
Enter ID of User to adjust Role: "; read ID
echo -e "
(1)$COL_CYAN Administrator$COL_RESET – access to all the admin features within a single site
(2)$COL_CYAN Editor$COL_RESET – publish and manage posts including the posts of other users
(3)$COL_CYAN Author$COL_RESET – publish and manage their own posts
(4)$COL_CYAN Contributor$COL_RESET – write and manage their own posts but cannot publish them
(5)$COL_CYAN Subscriber$COL_RESET – only manage their profile
(6)$COL_CYAN Exit$COL_RESET

Which Role would you like to assign to user $ID: \c" ;
read CHANGE && echo ''
case $CHANGE in
	1)	ROLE='administrator'; wp --skip-plugins --skip-themes user set-role $ID $ROLE ;;
	2)	ROLE='editor' ; wp --skip-plugins --skip-themes user set-role $ID $ROLE ;;
	3)	ROLE='author' ; wp --skip-plugins --skip-themes user set-role $ID $ROLE ;;
	4)	ROLE='contributor' ; wp --skip-plugins --skip-themes user set-role $ID $ROLE ;;
	5)	ROLE='subscriber' ; wp --skip-plugins --skip-themes user set-role $ID $ROLE ;;
	6)	return;;
	*)	invalidOption;;
esac
}

function wpChangeUser(){
# need to request entry of new user and old user

wp --skip-plugins --skip-themes user list --fields=user_login,display_name

echo -e "\nWhat user_login (and display_name) would you like to change?" ; read oldUser

echo -e "\nWhat is the new user_login you would like?" ; read newUser

echo -e ""

wp --skip-plugins --skip-themes user update $oldUser --display_name=$newUser

read changeUser <<<$(awk -F\' '/table_prefix/ {print $2}' wp-config.php); read db usr ps pre <<<$(awk -F\' '/DB_/ {print $4}' wp-config.php) && mysql -u $usr -p$ps -D $db -e "UPDATE "$changeUser"users SET user_login = '$newUser' WHERE user_login = '$oldUser'";
#'
echo -e "$COL_GREEN\rSuccess:$COL_RESET Updated user_login and display_name.\n"

wp --skip-plugins --skip-themes user list --fields=ID,user_login,display_name
}
##### END WPUSER COMMANDS #####
##### WPUPDATE COMMANDS #####

### UPDATE CORE FILES TO LATEST VERSION ###
function wpCoreUpdate(){
if [ ! -f .automatic_updates_disabled ]; then
wp --skip-plugins --skip-themes core update
wp --skip-plugins --skip-themes core update-db
else
echo -e "$COL_MAGENTA UPDATE FUNCTIONS DISABLED as long as .automatic_updates_disabled Exists! $COL_RESET"
fi
}
### UPDATE PLUGINS TO LATEST VERSION ###
function wpPluginUpdate(){
if [ ! -f .automatic_updates_disabled ]; then
wp --skip-plugins --skip-themes plugin update --all
else
echo -e "$COL_MAGENTA UPDATE FUNCTIONS DISABLED as long as .automatic_updates_disabled Exists! $COL_RESET"
fi
}
### UPDATE THEMES TO LATEST VERSION ###
function wpThemeUpdate(){
if [ ! -f .automatic_updates_disabled ]; then
wp --skip-plugins --skip-themes theme update --all
else
echo -e "$COL_MAGENTA UPDATE FUNCTIONS DISABLED as long as .automatic_updates_disabled Exists! $COL_RESET"
fi
}
### UPDATE ENTIRE INSTALL TO LATEST VERSION ###
function wpUpdateInstall(){
if [ ! -f .automatic_updates_disabled ]; then
wpCoreUpdate
wpThemeUpdate
wpPluginUpdate
wpEnduranceCacheUpdate
else
echo -e "$COL_MAGENTA UPDATE FUNCTIONS DISABLED as long as .automatic_updates_disabled Exists! $COL_RESET"
fi
}
### DISPLAY AVAILABLE UPDATES ###
function wpCheckUpdate(){
echo -e "$COL_GREEN
----- Core Updates ----- $COL_RESET"
wp --skip-plugins --skip-themes core check-update
echo -e "$COL_GREEN
----- Plugin Updates ----- $COL_RESET"
wp --skip-plugins --skip-themes plugin update --all --dry-run
echo -e "$COL_GREEN
----- Theme Updates ----- $COL_RESET"
wp --skip-plugins --skip-themes theme update --all --dry-run
}

##### END WPUPDATE COMMANDS #####
##### BACKUP #####

function wpbackup(){
NOW=$(date +"%Y_%m_%d_%H-%M")
echo -e "$COL_GREEN
Starting backup.....\n
Exporting Database.....\n"
dbexport
echo -e "Backing Up Files.....$COL_RESET"
	# get md5sum of backup files to compare with backup
	cd wp-content/ && SRC=$(find | md5sum) && cd ../
	# Makes directory and copy all WordPress files into directory
	mkdir QWPCLI_BACKUP_$NOW
	rsync -auvxhr wp-* QWPCLI_BACKUP_$NOW
    	rsync -auvxh .htaccess QWPCLI_BACKUP_$NOW 2>/dev/null || echo -e "\n\tNo .htaccess was present/backed up.";
	rsync -auvxh index.php QWPCLI_BACKUP_$NOW 2>/dev/null || echo -e "\n\tNo index.php was present/backed up.";
	rsync -auvxh license.txt QWPCLI_BACKUP_$NOW 2>/dev/null || echo -e "\n\tNo license.txt was present/backed up.";
	rsync -auvxh readme.html QWPCLI_BACKUP_$NOW 2>/dev/null || echo -e "\n\tNo readme.html was present/backed up.";
	rsync -auvxh xmlrpc.php QWPCLI_BACKUP_$NOW 2>/dev/null || echo -e "\n\tNo xmlrpc.php was present/backed up.";

	mv -f $file QWPCLI_BACKUP_$NOW; #$file comes from dbexport
	
	# Check for successful backup
	cd QWPCLI_BACKUP_$NOW/wp-content/ && DST=$(find | md5sum) && cd ../../
	echo -e "$COL_GREEN\nChecking backup integrity...$COL_RESET"
	if [ "$SRC" != "$DST" ]; then
	echo -e "$COL_CYAN\nWarning:$COL_RESET Backup source does NOT match destination!"
	echo -e "Retry backup? (y) or (n): \c"; read check;
		if [ $check == 'y' ]; then
		rm -rf QWPCLI_BACKUP_$NOW/ $file
		wpbackup
		return #avoid script loops
		else
		echo -e "$COL_CYAN\nWarning:$COL_RESET Continuing with incomplete backup!"
		fi	
	else
	echo -e "$COL_GREEN\nSuccess:$COL_RESET Backup Source matches destination"
	fi
	
	# if user would like, compress directory
	echo -e "\nWould you like to compress directory? (y) or (n): \c"; read input;
	if [ $input == 'y' ]; then
	echo -e "\nCompress using what format?\n(1) .tar.gz\n(2) .zip\n"

	read backupSelect && echo ''
	case $backupSelect in
        1)	tar -zvcf QWPCLI_BACKUP_$NOW.tar.gz QWPCLI_BACKUP_$NOW;
                rm -fr QWPCLI_BACKUP_$NOW;
                echo -e "$COL_GREEN\n\tBackup Completed\n\n\tYour Backup is located in:\n\n\tQWPCLI_BACKUP_$NOW.tar.gz\n\n$COL_RESET";
	;;
        2)	zip -r QWPCLI_BACKUP_$NOW.zip QWPCLI_BACKUP_$NOW;
                rm -fr QWPCLI_BACKUP_$NOW;
                echo -e "$COL_GREEN\n\tBackup Completed\n\n\tYour Backup is located in:\n\n\tQWPCLI_BACKUP_$NOW.zip\n\n$COL_RESET";
	;;
	*) invalidOption ;;
	esac
	elif [ $input != 'y' ]; then
		echo -e "$COL_GREEN\n\tBackup Completed\n\n\tYour Backup is located in:\n\n\tQWPCLI_BACKUP_$NOW\n\n$COL_RESET";
	fi
}

function wpCoreBackup(){
NOW=$(date +"%Y_%m_%d_%H-%M")
echo -e "$COL_GREEN
Starting backup.....\n
Exporting Database.....\n"
dbexport
echo -e "Backing Up Files.....$COL_RESET"
	# Makes directory and copy all wordpress files into directory
	mkdir QWPCLI_CORE_$NOW && mkdir QWPCLI_CORE_$NOW/wp-content/ && mkdir QWPCLI_CORE_$NOW/wp-content/mu-plugins/ && mkdir QWPCLI_CORE_$NOW/wp-content/plugins/ && mkdir QWPCLI_CORE_$NOW/wp-content/themes/ ;
	rsync -auxr --exclude 'wp-content/' wp* QWPCLI_CORE_$NOW;
	rsync -auxr wp-content/mu-plugins/ QWPCLI_CORE_$NOW/wp-content/mu-plugins/ 2>/dev/null || echo -e "\n\tNo mu-plugins was present/backed up.";
	rsync -auxr wp-content/plugins/ QWPCLI_CORE_$NOW/wp-content/plugins/ 2>/dev/null || echo -e "\n\tNo plugins was present/backed up.";
	rsync -auxr wp-content/themes/ QWPCLI_CORE_$NOW/wp-content/themes/ 2>/dev/null || echo -e "\n\tNo themes was present/backed up.";
    	rsync -auxh {.htaccess,index.php,license.txt,readme.html,xmlrpc.php} QWPCLI_CORE_$NOW 2>/dev/null

	mv -f $file QWPCLI_CORE_$NOW;

	# if user would like, compress directory
	# echo -e "\nWould you like to compress (.tar.gz) backup? (y) or (n): \c"; read input;
	# if [ $input == 'y' ]; then
		tar -zcf QWPCLI_CORE_$NOW.tar.gz QWPCLI_CORE_$NOW;
		rm -fr QWPCLI_CORE_$NOW;
		echo -e "$COL_GREEN\n\tBackup Completed\n\n\tYour Backup is located in:\n\n\tQWPCLI_CORE_$NOW.tar.gz\n\n$COL_RESET";
	# elif [ $input != 'y' ]; then
	#	echo -e "$COL_GREEN\n\tBackup Completed\n\n\tYour Backup is located in:\n\n\tQWPCLI_CORE_$NOW\n\n$COL_RESET";
	# fi
}

##### END BACKUP #####
##### WPWORKS #####

function wpworks(){
wpCoreBackup
wpCoreUpdate
wpPluginUpdate
wpThemeUpdate
wpfix
echo -e "$COL_GREEN
Success:$COL_RESET Ran Updates. $COL_GREEN
Success:$COL_RESET Transients Cleared. $COL_GREEN
Success:$COL_RESET Flushed Object Cache. $COL_GREEN
Success:$COL_RESET Database Repaired/Optimized. $COL_GREEN
Success:$COL_RESET Rewrite Flushed."
}

##### END WPWORKS #####
### GENERAL FIXES ###

function wpfix(){
echo -e "$COL_BLUE
This could take a moment....$COL_RESET"
wp --skip-plugins --skip-themes transient delete-expired
# wp --skip-plugins --skip-themes media regenerate --yes --quiet
wpRewriteFlush
rmorphanmeta
wp --skip-plugins --skip-themes cache flush
wp --skip-plugins --skip-themes db repair
wp --skip-plugins --skip-themes db optimize
}

### END GENERAL FIXES ###

#################### ADDITIONAL FUNCTIONS ####################
### COUNT FILES IN CURRENT DIR ###
function fcount() {
find -printf x|wc -c
}
### LIST SIZE OF CURRENT DIR ###
function dirsize() {
du -ah --max-depth=1 | sort -h
}
### LIST ALL WORDPRESS DATABASES ###
function dblist() {
find2perl -name "wp-config.php" -exec grep --color -iHn DB_NAME {} \; | perl
}
### EXPORT DATABASE ###
function dbexport(){
# Get info from the wp globals
getWPinfo

echo "Starting export..."
file="$2"
[[ -z "$file" ]] && file="QWPCLI_$dbname"_$(now).sql
mysqldump -h "$dbhost" -u "$dbuser" -p"$dbpass" "$dbname" > "$file" && echo -e "Exported database '$dbname' to file '$file'\n" || echo -e "Failed to export database '$dbname' to file '$file'!\n"
}
### INCORECT MENU OPTION ###
function invalidOption(){
echo -e "$COL_RED\rInvalid Option!$COL_RESET" && return
}
### REPLACE CORE WITH SAME VERSION ###
function wpReplaceCore(){
version=$(grep 'wp_version ' wp-includes/version.php | cut -d\' -f 2)

echo -e "$COL_GREEN\rReplacing existing core with fresh $version files\n$COL_RESET"

if [[ ! -e "wordpress-$version.tar.gz" ]]; then
	if ! wget -q "https://wordpress.org/wordpress-$version.tar.gz"; then
		echo -e "$COL_RED\rUnable to download wordpress-$version.tar.gz $COL_RESET"
		return 9
	else echo "Downloaded wordpress-$version.tar.gz..."
	fi
else echo "wordpress-$version.tar.gz already exists! Please rename!"
return 1
fi

temp=$(date -u +"%Y_%m_%d-%H_%M")

echo "Checking for existing WordPress files..."
local wpfiles=$(find -maxdepth 1 -name "wp-*" -o -name index.php -o -name license.txt -o -name readme.html -o -name xmlrpc.php)

if [[ -z "$wpfiles" ]]; then
	echo -e "No existing WordPress files found..."
	else
	oldWP="QWPCLI_CORE_$temp"
	echo -e "Old WordPress files found! Moving them to$COL_BLUE $oldWP... $COL_RESET"
	mkdir "$oldWP"
	while read -r f; do mv "$f" "$oldWP"; done <<< "$wpfiles"
fi

tar -xf "wordpress-$version.tar.gz" --strip-components=1 && echo "Unpacking the update..."
rm -f "wordpress-$version.tar.gz" ### && echo "Removed wordpress-$version.tar.gz..."

if [[ -d "$oldWP/wp-content" ]]; then
	mv wp-content wp-content_"$temp" ### && echo "Moved default wp-content to wp-content_$temp..." &&
	mv "$oldWP/wp-content" . ###  && echo "Moved old wp-content back into place..." &&
	rm -rf wp-content_"$temp" ### && echo "Removed wp-content_$temp..."
fi

if [[ -f "$oldWP/wp-config.php" ]]; then
	cp "$oldWP/wp-config.php" .
 	### echo -e "Copied old wp-config.php back into place..."
	echo -e "$COL_GREEN\rSuccess:$COL_RESET Core replaced with stock $version files"
	else
	cp wp-config-sample.php wp-config.php
	echo -e "$COL_CYAN\rWarning:$COL_RESET No previous wp-config.php found! Used wp-config-sample.php..."
fi
echo -e "\nCompressing old WordPress core...$COL_GREEN" && tar -zcf "$oldWP".tar.gz "$oldWP" --remove-files && echo -e "Success:$COL_RESET Old WordPress files located$COL_BLUE $oldWP.tar.gz $COL_RESET"
wp --skip-plugins --skip-themes core update-db --quiet
}
### WGET LATEST ###
function coreLatest() {
###  version=$(grep 'wp_version ' wp-includes/version.php | cut -d\' -f 2)

echo -e "$COL_GREEN\rReplacing existing core with latest version\n$COL_RESET"

if [[ ! -e "wordpress-$wpver.tar.gz" ]]; then
	if ! wget -q "https://wordpress.org/wordpress-latest.tar.gz"; then
		echo -e "$COL_RED\rUnable to download wordpress-latest.tar.gz $COL_RESET"
		return 9
	else echo "Downloaded wordpress-latest.tar.gz..."
	fi
else echo "wordpress-latest.tar.gz already exists! Please rename!"
return 1
fi

temp=$(date -u +"%Y_%m_%d-%H_%M")

echo "Checking for existing WordPress files..."
local wpfiles=$(find -maxdepth 1 -name "wp-*" -o -name index.php -o -name license.txt -o -name readme.html -o -name xmlrpc.php)

if [[ -z "$wpfiles" ]]; then
	echo -e "No existing WordPress files found..."
	else
	oldWP="QWPCLI_CORE_$temp"
	echo -e "Old WordPress files found! Moving them to$COL_BLUE $oldWP... $COL_RESET"
	mkdir "$oldWP"
	while read -r f; do mv "$f" "$oldWP"; done <<< "$wpfiles"
fi

tar -xf "wordpress-latest.tar.gz" --strip-components=1 && echo "Unpacking the update..."
rm -f "wordpress-latest.tar.gz" ### && echo "Removed wordpress-latest.tar.gz..."

if [[ -d "$oldWP/wp-content" ]]; then
	mv wp-content wp-content_"$temp"  ### && echo "Moved default wp-content to wp-content_$temp..." &&
	mv "$oldWP/wp-content" .  ### && echo "Moved old wp-content back into place..." &&
	rm -rf wp-content_"$temp" ### && echo "Removed wp-content_$temp..."
fi

if [[ -f "$oldWP/wp-config.php" ]]; then
	cp "$oldWP/wp-config.php" .
	### echo -e "Copied old wp-config.php back into place..."
	echo -e "$COL_GREEN\rSuccess:$COL_RESET Core updated to latest version"
	else
	cp wp-config-sample.php wp-config.php
	echo -e "$COL_CYAN\rWarning:$COL_RESET No previous wp-config.php found! Used wp-config-sample.php..."
fi
echo -e "\nCompressing old WordPress core...$COL_GREEN" && tar -zcf "$oldWP".tar.gz "$oldWP" --remove-files && echo -e "Success:$COL_RESET Old WordPress files located$COL_BLUE $oldWP.tar.gz $COL_RESET"
wp --skip-plugins --skip-themes core update-db --quiet
}

### Install MOJO ###
function wpMojoInstall(){
wp --skip-plugins --skip-themes plugin uninstall mojo-marketplace mojo-marketplace-wp-plugin mojo-marketplace-wp-plugin-production --deactivate --quiet

wp --skip-plugins --skip-themes plugin install https://github.com/mojoness/mojo-marketplace-wp-plugin/archive/production.zip --activate
### MOJO 2.0 BROKE LINK ###
# wp --skip-plugins --skip-themes plugin install https://www.mojomarketplace.com/mojo-plugin-assets/updater/release/mojo-marketplace-wp-plugin.zip --activate
###########################
 
# view options by running wp mojo branding --update=
echo -e "$COL_GREEN
Choose a brand for the Mojo Plugin below:
BlueHost
iPower
iPage
FatCow

Brand not listed? type default (or press enter)...$COL_RESET";

read brandSelect && echo ''
case $brandSelect in
	[Bb][Ll][Uu][Ee][Hh][Oo][Ss][Tt])	wp mojo branding --update=BlueHost;;
        [Ff][Aa][Tt][Cc][Oo][Ww])               wp mojo branding --update=FatCow;;
        [Ii][Pp][Oo][Ww][Ee][Rr])		wp mojo branding --update=iPower;;
        [Ii][Pp][Aa][Gg][Ee])                   wp mojo branding --update=iPage;;
        *)					echo -e "$COL_GREEN\rSuccess:$COL_RESET Generic branding set";;
esac

echo -e "$COL_GREEN
Enable Coming Soon page? y/n $COL_RESET";
read comingSoonSelect && echo ''
case $comingSoonSelect in
        [Yy])       wp --skip-plugins --skip-themes option set mm_coming_soon true;;
        *)          wp --skip-plugins --skip-themes option set mm_coming_soon false; echo -e "$COL_MGREEN\rNotice: Coming Soon page inactive.$COL_RESET ";;
esac
wp --skip-plugins --skip-themes option set jpo_firstrun 1
}

function mojotoggle(){
mojoState=$(wp --skip-plugins --skip-themes option get mm_coming_soon)

if [ $mojoState == "false" ] ; then
wp --skip-plugins --skip-themes option set mm_coming_soon true
fi

if [ $mojoState == "true" ] ; then
wp --skip-plugins --skip-themes option set mm_coming_soon false
fi
}

function wpEnduranceCache(){
EC_INSTALL="0"

if [[ ! -f wp-config.php ]]; then echo -e "$COL_CYAN\nWarning:$COL_RESET Could not find wp-config.php! Not installing a WordPress plugin on a non WordPress site!"
else
echo -e "$COL_GREEN
This will install a mu caching plugin that requires zero configuration.

After install permalinks are regenerated to activate the caching. $COL_RESET\n"

secs=$((5 * 1))
while [ $secs -gt 0 ]; do
   echo -ne " Beginning install in: $secs\033[0K\r"
   sleep 1
   : $((secs--))
done
echo ""
if [ ! -d wp-content/mu-plugins/ ]; then
mkdir wp-content/mu-plugins/
fi

if [ -f wp-content/mu-plugins/endurance-page-cache.php ]; then
wpEnduranceCacheUpdate
fi

if [ ! -f wp-content/mu-plugins/endurance-page-cache.php ]; then
wget https://raw.githubusercontent.com/bluehost/endurance-page-cache/production/endurance-page-cache.php -O wp-content/mu-plugins/endurance-page-cache.php;
EC_INSTALL="1"
fi

# EBC merged with EPC. Old Versions conflict, so remove.
if [ -f wp-content/mu-plugins/endurance-browser-cache.php ]; then
rm -rf wp-content/mu-plugins/endurance-browser-cache.php
echo -e "$COL_GREEN\nSuccess:$COL_RESET EBC removed as it mergeged with EPC"
wpEnduranceCacheClear
wpfix
fi

if [ "$EC_INSTALL" == "1" ]; then
echo -e "$COL_GREEN\nSuccess:$COL_RESET Caching Downloaded/Updated $COL_CYAN
Warning:$COL_RESET Permalinks will now be flushed..."
sleep 3
wpfix
echo -e "$COL_GREEN\nSuccess:$COL_RESET Endurance Page Cache activated"
fi
fi
}

function wpEnduranceCacheUpdate(){
EC_UPDATE="0"
if [ -f wp-content/mu-plugins/endurance-page-cache.php ]; then
EPC_LATEST=$(curl -s https://api.mojomarketplace.com/mojo-plugin-assets/json/mu-plugins.json | awk -v k="text" '{n=split($0,a,","); for (i=1; i<=n; i++) print a[i]}' | sed '/^$/d' | sed -e 's/^[ \t]*//' | sed 's/\"//g'| sed 's/[{}]//g' | grep -A1 EPC_VERSION | grep -v EPC_VERSION | tr -d ' ' | tail -c 4)
EPC_CUR=$(wp --skip-plugins --skip-themes plugin list --name=endurance-page-cache --fields=version --format=csv | grep -v version)

	if (( $(echo "$EPC_LATEST >  $EPC_CUR" | bc -l)  )); then
	rm -rf wp-content/mu-plugins/endurance-page-cache.php
	wget https://raw.githubusercontent.com/bluehost/endurance-page-cache/production/endurance-page-cache.php -O wp-content/mu-plugins/endurance-page-cache.php;
	EC_UPDATE="1" 
	echo -e "$COL_GREEN\nSuccess:$COL_RESET Endurance Page Cache updated from $EPC_CUR to $EPC_LATEST"
	fi
	if (( $(echo "$EPC_LATEST <=  $EPC_CUR" | bc -l)  )); then
	echo -e "$COL_GREEN\nSuccess:$COL_RESET Endurance Page Cache already at the latest version: $EPC_CUR"
	fi
fi

# EBC merged with EPC. Old Versions conflict, so remove.
if [ -f wp-content/mu-plugins/endurance-browser-cache.php ]; then
rm -rf wp-content/mu-plugins/endurance-browser-cache.php
echo -e "$COL_GREEN\nSuccess:$COL_RESET EBC removed as it mergeged with EPC"
wpEnduranceCacheClear
wpfix
fi

if [ "$EC_UPDATE" == "1" ]; then
wpEnduranceCacheClear
wpfix
fi
}

function wpEnduranceCacheClear(){
rm -rfv wp-content/endurance-page-cache/
echo -e "$COL_GREEN\nSuccess:$COL_RESET Endurance Page Cache cleared\n"
}

### WSOD Fix ###

function wpwsodauto(){
echo "no"
}

function wpwsod(){
# Get info from the wp globals
getWPinfo

THEMENAME=$(wp --skip-plugins --skip-themes option get stylesheet)
### OPTION TO BACKUP ###
echo -e "\nWould you like to make a backup? (Does not include wp-content) (y) or (n): \c"; read input;
if [ $input == 'y' ]; then
	wpCoreBackup
elif [ $input != 'y' ]; then
	echo -e "";
fi

### DEACTIVATE PLUGINS ###
wpPluginDeactivate
echo -e "\nPlugins deactivated. Does the site work? y/n/q \c" ;
read wsodSelect && echo ''
case $wsodSelect in
	[Yy]*)
		wpPluginActivate
		# TAIL ERROR LOG AND WPCHECK PLUGINS #
		echo -e "$COL_GREEN\nRecent Error Logs: $COL_RESET"
		errl1
		echo -e "\nLooks like it was a Plugin issue. \nCheck the error_log to see if you can narrow down the cause."
	;;

	[Nn]*) ### DEACTIVATE THEME ###
		wpThemeDefault
		echo -e "\nTheme set to new install of Twenty Seventeen. Does the site work? y/n/q \c"
		read wsodSelect && echo ''
		case $wsodSelect in
			[Yy]*)
				wp --skip-plugins --skip-themes theme activate $THEMENAME
				wpPluginActivate
				# WPCHECK ALL AND TAIL ERROR LOG #
				echo -e "$COL_GREEN\nRecent Error Logs: $COL_RESET"
				errl1
				echo -e "\nCould be a Theme or Plugin issue. \nCheck the error_log to see if you can narrow down the cause."
			;;

			### PERMALINKS ###
			[Nn]*)
				wpRewriteFlush
				echo -e "\nPermalinks/Rewrite Rules flushed. Does the site work? y/n/q \c"
				read wsodSelect && echo ''
				case $wsodSelect in
				[Yy]*)
					wp --skip-plugins --skip-themes theme activate $THEMENAME
					wpPluginActivate
					# WPCHECK ALL AND TAIL ERROR LOG #
					echo -e "$COL_GREEN\nRecent Error Logs: $COL_RESET"
					errl1
					echo -e "\nPlugins and Theme reactivated. \nCheck the error_log to see if you can narrow down the cause."
				;;

				### REPLACE CORE FILES ###
				[Nn]*)
					wpReplaceCore
					echo -e "\nCore replaced with stock $version files. Does the site work? y/n/q \c"
					read wsodSelect && echo ''
					case $wsodSelect in
					[Yy]*)
						wp --skip-plugins --skip-themes theme activate $THEMENAME
						wpPluginActivate
						# WPCHECK ALL AND TAIL ERROR LOG #
						echo -e "$COL_GREEN\nRecent Error Logs: $COL_RESET"
						errl1
						echo -e "\nPlugins and Theme reactivated. \nCheck the error_log to see if you can narrow down the cause."
					;;

					### ADDITIONAL CHECKS ###
					[Nn]*)
						echo -e "$COL_GREEN\nRecent Error Logs: $COL_RESET"
						errl1
						echo -e "\nResave the PHP Config and if that fails, seek additional assistance. $COL_RESET"
					echo -e "\nRevert site back to original state? (Reset Plugins and Theme) y/n/q \c"
					read wsodSelect && echo ''
					case $wsodSelect in
					[Yy]*)
						wp --skip-plugins --skip-themes theme activate $THEMENAME
						wpPluginActivate
						echo -e "$COL_GREEN\nPlugins and Theme restored. $COL_RESET"
					;;

					[Nn]*)
					;;

				[qQ]*) ;;
				*) invalidOption;;
				esac
				;;
			[qQ]*) ;;
			*) invalidOption;;
			esac
			;;
		[qQ]*) ;;
		*) invalidOption;;
		esac
		;;
	[qQ]*) ;;
	*) invalidOption;;
	esac
	;;
[Qq]*) ;;
*) invalidOption;;
esac


echo -e "$COL_MAGENTA
DONT FORGET:$COL_RESET Clean up after yourself! You may have generated QWPCLI files.

If done run$COL_CYAN wpcleanup$COL_RESET to remove all QWPCLI files.
"
}

### Disable Auto Updates ###
function wpAutoUpdate(){
echo -e "core\nplugins\nthemes" > .automatic_updates_disabled

echo -e "$COL_GREEN
Success:$COL_RESET Created .automatic_updates_disabled file."
}

function wpeval(){
echo ""
wp eval --skip-plugins 'echo "Eval Plugins: [OK]\n";'
wp eval --skip-themes 'echo "Eval Themes:  [OK]\n";'
wp eval --skip-wordpress 'echo "Eval Core:  [OK]\n";'
echo ""
}

function wpOverhaul(){
wpReplaceCore
wpRewriteFlush
wp --skip-plugins --skip-themes transient delete-expired
wp --skip-plugins --skip-themes cache flush
wp --skip-plugins --skip-themes media regenerate --yes
wp --skip-plugins --skip-themes db repair
wp --skip-plugins --skip-themes db optimize

echo -e "$COL_GREEN\r\nSuccess:$COL_RESET Action Completed."
}

function slowmysql(){
echo -e "Total:\n"
egrep -hRo $USER'_[0-9a-z]+' ~/tmp/mysql_slow_queries/ | sort | uniq -c

echo -e "\nDaily\n"
awk '/^use/ {print $2}' ~/tmp/mysql_slow_queries/`date +%Y%m%d`* | sort | uniq -c
}

function wpspeed(){
. <(curl -sS https://raw.githubusercontent.com/rowdya22/wpspeed/master/wpspeed)
}

function mailtest(){
BOXUSER=`whoami`
ADDRESS=`hostname`
LOCATION=`pwd`
PHP_TEMPLATE='
<?php
        $to = $_POST['to'];
        $subject = "Checking Mail Script";
        $body = "Hello, this is Customer Support testing your mail script.";
        $user = get_current_user();
        $address = `hostname`;
        $headers = "From: " . $_POST['from'] . "\r\n" . "X-Mailer: php";
        if (isset($_POST['Submit1'])) {
                if (mail($to, $subject, $body, $headers)) {
                        echo("<p>Message was sent!</p>");
                } else {
                        echo("<p>Sorry, message delivary failed!</p>");
                }
        } else {
                echo ("<p>Below is a test that will confirm functionality</br>
                        of the servers ability to use the PHP mail() function.</br></br></br>
                        \"To\" Field can be any email address</br></br>
                        \"From\" Field needs to be a valid email </br>
                         address on the users Hosting Account</br>
            		 or $user@$address</p>");
        }
?>
<html>
<head>
<title>Email Test</title>
<body>
        <form action="<?php $_PHP_SELF ?>" method="POST">
        To:   <input type="text" name="to" /></br>
        From: <input type="text" name="from" /></br>
        <input type="submit" name= "Submit1" value="Send Mail" />
        </form>
</body>
</html>
'

# assign IP of box to variable address
host -t a $ADDRESS > `pwd`/deleteMe;
awk '{print $4}' deleteMe > deleteMe01;
ADDRESS=`cat deleteMe01`

# assign path of file to variable location
echo $LOCATION > `pwd`/deleteMe;
awk -F public_html '{print $2}' deleteMe > deleteMe01;
LOCATION=`cat deleteMe01`;

# clean up
rm -fr deleteMe{,01};

# create test_email.php file
echo $PHP_TEMPLATE > test_email.php;

URL=$(wp --skip-plugins --skip-themes option get siteurl)

# print out url of test_email.php file
echo -e "\n\tOpen link below by middle clicking on it";
echo -e "\n\t$URL/test_email.php\n";
read -t 120 -p "        --Link will be deleted in 2 minutes or by pushing (Enter)";
rm -fr `pwd`/test_email.php;
echo -e "\n\t--test_email.php removed\n\n\t...Goodbye\n"

}

function wptweak(){
echo -e "$COL_MAGENTA
Now disabling user registration, comments, and pingpacks... $COL_RESET"
sleep 2

wp --skip-plugins --skip-themes option set default_comment_status closed
wp --skip-plugins --skip-themes option set default_ping_status closed
wp --skip-plugins --skip-themes option set default_pingback_flag 0
wp --skip-plugins --skip-themes option set users_can_register 0
wp --skip-plugins --skip-themes option set comment_moderation 1
# wp --skip-plugins --skip-themes option set posts_per_page 5

echo -e "$COL_MAGENTA
Now disabling comments and pingbacks on existing content... $COL_RESET"
sleep 1
dbprefix=$(wp --skip-plugins --skip-themes eval 'global $wpdb;echo $wpdb->prefix;') ;
wp --skip-plugins --skip-themes db query "UPDATE ${dbprefix}posts SET comment_status='closed', ping_status='closed';"

echo -e "$COL_GREEN
Success:$COL_RESET WordPress updated with recommended settings."
}

### CLEAN UP QWPCLI FILES ###
function wpcleanup(){
unset HISTFILE && find ~/public_html*/ -maxdepth 5 \( -name "QWPCLI_*" -o -name ".QWPCLI_*" \)|xargs rm -rfv
}

function Downloadwpcheck(){
if [ ! -f troubleshoot.pl ]; then
wget https://github.com/voldemortensen/wcslc-2015/raw/master/troubleshoot.pl
echo -e "$COL_GREEN \nLatest troubleshoot.pl downloaded $COL_RESET"
fi

clean_up_files () { find ~/public_html*/ -maxdepth 5 \( -name "troubleshoot.pl" -o -name "qwpcli.md5" \)|xargs rm -rf; }
( sleep 30m; echo -e "$COL_MAGENTA\nAuto Cleanup of Files...$COL_RESET"; clean_up_files ; echo -e "$COL_MAGENTA\nCompleted. Press Enter to Continue...$COL_RESET"; ) &
}

function wpcheck(){
Downloadwpcheck
echo -e "
What would you like to check?:
(1) All
(2) Plugins
(3) Themes
(4) Data
(5) Exit

\tSelection: \c" ;

read coreSelect && echo ''
case $coreSelect in
	1)	perl troubleshoot.pl --all --wp_cli="/usr/php/54/usr/bin/php-cli -c /etc/wp-cli/php.ini /usr/local/bin/wp" ;;
	2)	perl troubleshoot.pl --plugins --wp_cli="/usr/php/54/usr/bin/php-cli -c /etc/wp-cli/php.ini /usr/local/bin/wp" ;;
	3)	perl troubleshoot.pl --themes --wp_cli="/usr/php/54/usr/bin/php-cli -c /etc/wp-cli/php.ini /usr/local/bin/wp" ;;
        4)      perl troubleshoot.pl --data --wp_cli="/usr/php/54/usr/bin/php-cli -c /etc/wp-cli/php.ini /usr/local/bin/wp" ;;
	5)	return;;
	*)	invalidOption;;
esac
}

# REMOVE ORPHANDED POSTMETA
function rmorphanmeta(){
dbprefix=$(wp --skip-plugins --skip-themes eval 'global $wpdb;echo $wpdb->prefix;') ;
wp --skip-plugins --skip-themes db query "DELETE pm FROM ${dbprefix}postmeta pm LEFT JOIN ${dbprefix}posts wp ON wp.ID = pm.post_id WHERE wp.ID IS NULL";

echo -e "$COL_GREEN\rSuccess:$COL_RESET Orphaned post_meta data removed using MySQL"
}

### Find error logs modified in the last 10 days and show the last 10 lines
function errl1(){
find -maxdepth 1 -mtime -10 -type f -iname "error_log*" -print0 | xargs -0 tail
}

##### WP MIGRATE #####
# Constants
# wpFiles=(.htaccess index.php license.txt readme.html wp-activate.php wp-admin wp-blog-header.php wp-comments-post.php wp-config.php wp-content wp-cron.php wp-includes wp-links-opml.php wp-load.php wp-login.php wp-mail.php wp-settings.php wp-signup.php wp-trackback.php wp-cli.yml xmlrpc.php)

function wpmigrate() {

wpFiles=(.htaccess index.php license.txt php.ini readme.html wp-* xmlrpc.php)

	local loc=$(pwd)/


	if [ -f "$loc"wp-config.php ]; then
		local migrateDir=~/public_html
		local migrate=false

		printf "$COL_GREEN\nWhere would you like to migrate to?\n$COL_RESET"

		# Loop using availdir function, until user selects directory they want to migrate to
		until [ $migrate == true ];
		do
			printf "$COL_GREEN\nAvailable directories in$COL_CYAN %s\n$COL_RESET\n" "~/public_html${migrateDir##/home*public_html}"
			availdir $migrateDir
		done

		while :
		do
			printf "$COL_GREEN\nWould you like to create a sub-directory within$COL_CYAN %s?\n$COL_RESET" "~/public_html${migrateDir##/home*public_html}"
			printf "$COL_GREEN\n(1)\tYes\n(2)\tNo\n$COL_RESET"
			printf "\nSelection: "; read selectSub

			if [ "$selectSub" -eq 1 ]; then
				printf "$COL_GREEN\nWhat would you like to name the sub-directory?$COL_RESET\n\nSub-directory name: "; read subDir
				printf "$COL_GREEN\nYou would like to:\n\n\tCreate sub-directory called:$COL_RESET $COL_CYAN %s\n$COL_GREEN\tMigrate:$COL_CYAN %s\n$COL_GREEN\tTo:$COL_CYAN %s\n$COL_RESET\n" "$subDir" "~/public_html${loc##/home*public_html}" "~/public_html${migrateDir##/home*public_html}$subDir"
				printf "$COL_GREEN\nCorrect?""\n\n(1)\tYes\n(2)\tNo\n$COL_RESET"
				printf "\nSelection: "; read selectMig
				printf "\n"

				if [ "$selectMig" -eq 1 ]; then
					migrateDir=$migrateDir/$subDir
					mkdir $migrateDir && printf "%40s${COL_CYAN}Success${COL_RESET}\r\tDirectory creation\n" || printf "%40s${COL_RED}Error${COL_RESET}\r\tDirectory creation\n"
					break

				elif [ "$selectMig" -eq 2 ]; then
					printf "$COL_CYAN\nWarning:$COL_RESET Migration cancelled!\n\n"
					return 1
				else
					printf "$COL_MAGENTA\nSorry, %s is not a valid response. Try again.$COL_RESET\n" "$selectSub"
				fi

			elif [ "$selectSub" -eq 2 ]; then
				break
			else
				printf "$COL_MAGENTA\nSorry, %s is not a valid response. Try again.$COL_RESET\n" "$selectSub"
			fi
		done

		for ((i = 0; i < ${#wpFiles[@]}; i++))
		do
			mv -f "$loc"${wpFiles[$i]} $migrateDir && printf "%40s${COL_CYAN}Success${COL_RESET}\r\t${wpFiles[$i]}\n" || printf "%40s${COL_RED}Error${COL_RESET}\r\t${wpFiles[$i]}\n"
		done

		printf "$COL_GREEN\nSuccess:$COL_RESET WordPress migration task complete\n"
	else
		printf "$COL_MAGENTA\nThere is no wp-config.php file present $COL_RESET\n\n" && return 1
	fi

echo -e "$COL_GREEN
Would you like to update the URLs now? y/n"
read updateURLs && echo ''
case $updateURLs in
	[Yy])	cd $migrateDir
		wpurlUpdate
	;;
	*)	echo -e "$COL_CYAN\nWarning:$COL_RESET URLs not updated."
	;;
esac
}

function availdir() {
	local availDir=($1/*/) # Create array containing path to directories of given directory

	for ((i = 0; i < ${#availDir[@]}; i++))
	do
		local dir=${availDir[$i]} # Print out each directory for user to select from
		printf "($(($i + 1)))\t%s\n" "${dir##$1/}"
	done

	local parentDir="${1%/*/}" # Create variable to reference parent directory, print out parent directory and migrate option
	printf "\n($((${#availDir[@]} + 1)))\tBack: %s\n" "~/public_html${parentDir##/home*public_html}"
	printf "($((${#availDir[@]} + 2)))\tMigrate to: %s\n" "~/public_html${1##/home*public_html}"

	# Read users selection and handle accordingly. View contents of selected directory, move up, or migrate to selected directory
	while :
	do
		printf "\nSelection: "; read selectDir

		if [ "$selectDir" -gt 0 ] && [ "$selectDir" -le "${#availDir[@]}" ]; then
			migrateDir=${availDir[$(($selectDir - 1))]}
			echo "$migrateDir"
			break
		elif [ "$selectDir" -eq "$((${#availDir[@]} + 1))" ]; then
			migrateDir=${1%/*/}
			echo "$migrateDir"
			break
		elif [ "$selectDir" -eq "$((${#availDir[@]} + 2))" ]; then
			migrate=true
			echo "$migrateDir"
			break
		fi

		printf "$COL_MAGENTA\nSorry, %s is not a valid response. Try again.$COL_RESET\n" "$selectDir"
	done
}

##### END WP MIGRATE #####

##### CONFIG OPTIONS #####

function editini(){
if [ ! -f php.ini ]; then
phpinigen
fi

if [ -f php.ini ]; then
echo -e "$COL_GREEN
Suggested Values:            Current Values: $COL_RESET
post_max_size       = 256M $COL_CYAN  $(grep post_max_size php.ini)$COL_RESET
upload_max_filesize = 256M $COL_CYAN  $(grep upload_max_filesize php.ini)$COL_RESET
max_input_vars      = 6000 $COL_CYAN  $(grep max_input_vars php.ini)$COL_RESET
memory_limit        = 512M $COL_CYAN  $(grep memory_limit php.ini)$COL_RESET
max_execution_time  = 60   $COL_CYAN  $(grep max_execution_time php.ini)$COL_RESET

Feel free to suggest changes or additional values

$COL_GREEN\nWould you like to push the following settings to php.ini? (y) or (n)
"
read editiniSelect && echo''
case $editiniSelect in
	[Yy])	cp php.ini .QWPCLI_php.ini.$NOW
		echo "php.ini file backup created..."
		sed -i "s/.*post_max_size\ .*/post_max_size = 256M/" php.ini
		sed -i "s/.*upload_max_filesize\ .*/upload_max_filesize = 256M/" php.ini
		sed -i "s/.*max_input_vars\ .*/max_input_vars = 6000/" php.ini
		sed -i "s/.*memory_limit\ .*/memory_limit = 512M/" php.ini
		sed -i "s/.*max_execution_time\ .*/max_execution_time = 60/" php.ini
		echo -e "$COL_GREEN\nSuccess:$COL_RESET php.ini file updated"
	;;
	*)	echo -e "$COL_CYAN\nWarning:$COL_RESET no changes were made!"
	;;
esac

else
echo -e "$COL_CYAN\nWarning:$COL_RESET php.ini file does not exit!"
fi
}

function editinisr(){
if [ ! -f php.ini ]; then
phpinigen
fi

if [ -f php.ini ]; then
echo -e "$COL_MAGENTA\nWARNING! This is is a search and replace tool! \nMake sure all spelling is exact prior to submitting changes!$COL_GREEN

Suggested Values:            Current Values: $COL_RESET
post_max_size       = 256M $COL_CYAN  $(grep post_max_size php.ini)$COL_RESET
upload_max_filesize = 256M $COL_CYAN  $(grep upload_max_filesize php.ini)$COL_RESET
max_input_vars      = 6000 $COL_CYAN  $(grep max_input_vars php.ini)$COL_RESET
memory_limit        = 512M $COL_CYAN  $(grep memory_limit php.ini)$COL_RESET
max_execution_time  = 60   $COL_CYAN  $(grep max_execution_time php.ini)$COL_RESET
$COL_GREEN
What php.ini value would you like to change? (everything before the =)$COL_RESET"
read search;

echo -e "$COL_GREEN\nWhat value should $search have? (everything after the =)$COL_RESET"
read replace;

echo -e "$COL_GREEN\nSet $search to $search = $replace? (y) or (n)"
read editiniSelect && echo ''
case $editiniSelect in
	[Yy])	checksearch=$(grep $search php.ini | wc -l)
		if [ $checksearch = 1 ]; then
			cp php.ini .QWPCLI_php.ini.$NOW
			echo "php.ini file backup created..."
			sed -i "s/.*$search\ .*/$search = $replace/" php.ini
			echo -e "$COL_GREEN\nSuccess:$COL_RESET $search set to $replace in php.ini"
		else
			echo -e "$COL_CYAN\nWarning:$COL_RESET Unable to find $search or multiple values exist! No changes made."
		fi
	;;
	*)	echo -e "$COL_CYAN\nWarning:$COL_RESET no changes were made!"
	;;
esac

else
echo -e "$COL_CYAN\nWarning:$COL_RESET php.ini file does not exit!"
fi
}

# CHILD FUNCTION FOR WPCONFIG
function wpConfigEdit(){
        insert="define( $search, $VALUE );"
        check=$(grep $search $file | wc -l) #CHECK IF ENTRY EXISTS

        if [ $check = 0 ]; then
        sed -i "s/$match/$match\n$insert/" $file
        echo -e "$COL_GREEN\nSuccess:$COL_RESET $insert set in wp-config.php."
        else
        #IF VALUE EXISTS ALREADY, PROMPT TO CHANGE
        echo -e "$COL_CYAN\nWarning:$COL_RESET $search already exists!$COL_MAGENTA\n"
        grep $search $file
        echo -e "$COL_GREEN\nOverwrite? (y) or (n) $COL_RESET"
        read configSelect && echo ''
                case $configSelect in
                [Yy])   sed -i "s/.*$search.*/$insert/" $file
                        echo -e "$COL_GREEN\nSuccess:$COL_RESET $search set to $insert in $file"
                ;;
                *)      echo -e "$COL_CYAN\nWarning:$COL_RESET No changes made."
                ;;
                esac
        fi
}

function wpconfig(){
file='wp-config.php'
match=$(grep table_prefix $file)

#Does user know what their are doing?
dialog --title 'wp-config.php Editor' --yesno 'This is an advanced menu. Do you wish to continue?' 6 30
response=$?
if [[ "$response" == '0' ]];then

#Config Options --checklist text height width list-height
cmd=(dialog --title 'Which configuration changes would you like to make?' --separate-output --checklist "Select options:" 22 76 10)
options=(1 "AUTOSAVE_INTERVAL" off    # any option can be set to default to "on"
         2 "DISALLOW_FILE_EDIT" off
         3 "EMPTY_TRASH_DAYS" off
         4 "NOBLOGREDIRECT" off
         5 "WP_AUTO_UPDATE_CORE" off
         6 "WP_DEBUG" off
         7 "WP_MAX_MEMORY_LIMIT" off
         8 "WP_MEMORY_LIMIT" off
	 9 "WP_POST_REVISIONS" off
        )
choices=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty)
clear
for choice in $choices
do
    case $choice in
### BEGIN AUTOSAVE_INTERVAL ###
        1)
	echo -e "\n$COL_BLUE----- AUTOSAVE_INTERVAL -----$COL_RESET"
	echo -e "When editing a post, WordPress uses Ajax to auto-save revisions to the post as you edit. You may want to increase this setting for longer delays in between auto-saves, or decrease the setting to make sure you never lose changes.$COL_CYAN The default is 60 seconds$COL_RESET"

	#CHECK FOR CORRECT ENTRY
	unset VALUE
	while [[ ! ${VALUE} =~ ^[0-9]+$ ]]; do
		echo -e "Set what value (in seconds) for$COL_CYAN AUTOSAVE_INTERVAL$COL_RESET?"
		read VALUE;
	done

	search="'AUTOSAVE_INTERVAL'"

	if [[ ${VALUE} =~ [0-9]+$ ]]; then
		wpConfigEdit
	else
		echo -e "$COL_CYAN\nWarning:$COL_RESET Invalid Entry! $VALUE is not a number!"
	fi
	;;
### END AUTOSAVE_INTERVAL ###
### BEGIN DISALLOW_FILE_EDIT ###
	2)
	echo -e "\n$COL_BLUE----- DISALLOW_FILE_EDIT -----$COL_RESET"
	echo -e "Occasionally you may wish to disable the plugin or theme editor to prevent overzealous users from being able to edit sensitive files and potentially crash the site. Disabling these also provides an additional layer of security if a hacker gains access to a well-privileged user account.\n\n$COL_GREEN Please note:$COL_RESET the functionality of some plugins may be affected by the use of current_user_can('edit_plugins') in their code. Plugin authors should avoid checking for this capability, or at least check if this constant is set and display an appropriate error message. Be aware that if a plugin is not working this may be the cause.$COL_CYAN Default option is false$COL_RESET
Set what value (true/false) for$COL_CYAN DISALLOW_FILE_EDIT$COL_RESET?"
        read VALUE;

        search="'DISALLOW_FILE_EDIT'"

	wpConfigEdit
	;;
### END DISALLOW_FILE_EDIT ###
### BEGIN EMPTY_TRASH_DAYS ###
	3)
	echo -e "\n$COL_BLUE----- EMPTY_TRASH_DAYS -----$COL_RESET"
	echo -e "This constant controls the number of days before WordPress permanently deletes posts, pages, attachments, and comments, from the trash bin.$COL_CYAN The default is 30 days.$COL_RESET\nTo disable trash set the number of days to zero. Note that WordPress will not ask for confirmation when someone clicks on \"Delete Permanently\"."

        #CHECK FOR CORRECT ENTRY
        unset VALUE
        while [[ ! ${VALUE} =~ ^[0-9]+$ ]]; do
        	echo -e "Set what value (in days) for$COL_CYAN EMPTY_TRASH_DAYS$COL_RESET?"
	        read VALUE;
        done

        search="'EMPTY_TRASH_DAYS'"

        if [[ ${VALUE} =~ [0-9]+$ ]]; then
	        wpConfigEdit
        else
       		echo -e "$COL_CYAN\nWarning:$COL_RESET Invalid Entry! $VALUE is not a number!"
        fi
	;;
### END EMPTY_TRASH_DAYS ###
### BEGIN NOBLOGREDIRECT ###
	4)
	echo -e "\n$COL_BLUE----- NOBLOGREDIRECT -----$COL_RESET"
	echo -e "NOBLOGREDIRECT can be used to redirect the browser if the visitor tries to access a nonexistent site using either a subdomain or a subfolder.$COL_CYAN\nE.g., http://nonexistent.example.com or http://example.com/nonexistent/ $COL_RESET
Set what value (as URL) for$COL_CYAN NOBLOGREDIRECT$COL_RESET?"
        read foo;
        VALUE="'$foo'"

	search="'NOBLOGREDIRECT'"

	wpConfigEdit
	;;
### END NOBLOGREDIRECT ###
### BEGIN WP_AUTO_UPDATE_CORE ###
	5)
	echo -e "\n$COL_BLUE----- WP_AUTO_UPDATE_CORE -----$COL_RESET"
	echo -e "The easiest way to manipulate core updates is with the WP_AUTO_UPDATE_CORE constant.$COL_CYAN\ntrue$COL_RESET - Enable all core updates, including minor and major $COL_CYAN\nfalse$COL_RESET - Disable all core updates $COL_CYAN\nminor$COL_RESET - Enable core updates for minor releases (default)
Set what value (true/false/minor) for$COL_CYAN WP_AUTO_UPDATE_CORE$COL_RESET?"
	read foo;
	if [ $foo == 'minor' ]; then
		VALUE="'$foo'"
	else
		VALUE="$foo"
	fi

	search="'WP_AUTO_UPDATE_CORE'"

	wpConfigEdit
	;;
### END WP_AUTO_UPDATE_CORE ###
### BEGIN WP_DEBUG ###
	6)
	echo -e "\n$COL_BLUE----- WP_DEBUG -----$COL_RESET"
	echo -e "The WP_DEBUG option, controls the reporting of some errors and warnings and enables use of the WP_DEBUG_DISPLAY and WP_DEBUG_LOG settings.$COL_CYAN The default value is false.$COL_RESET
Set what value (true/false) for$COL_CYAN WP_DEBUG$COL_RESET?"
	read VALUE;

	search="'WP_DEBUG'"
	wpConfigEdit
	;;
### END WP_DEBUG ###
### BEGIN WP_MAX_MEMORY_LIMIT ###
	7)
	echo -e "\n$COL_BLUE----- WP_MAX_MEMORY_LIMIT -----$COL_RESET"
	echo -e "Administration tasks require much memory than usual operation. When in the administration area, the memory can be increased or decreased from the WP_MEMORY_LIMIT by defining WP_MAX_MEMORY_LIMIT."

	#CHECK FOR CORRECT ENTRY
        unset foo
        while [[ ! ${foo} =~ ^[0-9]+$ ]]; do
		echo -e "Set what value (number only) for$COL_CYAN WP_MAX_MEMORY_LIMIT$COL_RESET?"
		read foo;
        done

	search="'WP_MAX_MEMORY_LIMIT'"

        if [[ ${foo} =~ [0-9]+$ ]]; then
	        VALUE="'${foo}M'"
	        wpConfigEdit
        else
	        echo -e "$COL_CYAN\nWarning:$COL_RESET Invalid Entry! $VALUE is not a number!"
        fi
	;;
### END WP_MAX_MEMORY_LIMIT ###
### BEGIN WP_MEMORY_LIMIT ###
	8)
	echo -e "\n$COL_BLUE----- WP_MEMORY_LIMIT -----$COL_RESET"
	echo -e "The WP_MEMORY_LIMIT option allows you to specify the maximum amount of memory that can be consumed by PHP. This setting may be necessary in the event you receive a message such as \"Allowed memory size of xxxxxx bytes exhausted.\""

	#CHECK FOR CORRECT ENTRY
        unset foo
        while [[ ! ${foo} =~ ^[0-9]+$ ]]; do
                echo -e "Set what value (number only) for$COL_CYAN WP_MEMORY_LIMIT$COL_RESET?"
                read foo;
        done

	search="'WP_MEMORY_LIMIT'"

        if [[ ${foo} =~ [0-9]+$ ]]; then
        	VALUE="'${foo}M'"
	        wpConfigEdit
        else
	        echo -e "$COL_CYAN\nWarning:$COL_RESET Invalid Entry! $VALUE is not a number!"
        fi
	;;
### END WP_MEMORY_LIMIT ###
### BEGIN WP_POST_REVISIONS ###
	9)
	echo -e "\n$COL_BLUE----- WP_POST_REVISIONS -----$COL_RESET"
	echo -e "WordPress, by default, will save copies of each edit made to a post or page, allowing the possibility of reverting to a previous version of that post or page. The saving of revisions can be disabled by setting the value to$COL_CYAN false$COL_RESET, or a maximum$COL_CYAN number$COL_RESET of revisions per post or page can be specified."

        #CHECK FOR CORRECT ENTRY
        unset VALUE

	if [[ ! ${VALUE} = 'false' ]]; then
		echo -e "\nSet what value (as a number) for$COL_CYAN WP_POST_REVISIONS$COL_RESET?"
		read VALUE;
	else
        while [[ ! ${VALUE} =~ [0-9]+$ ]]; do
                echo -e "\nSet what value (as a number) for$COL_CYAN WP_POST_REVISIONS$COL_RESET?"
                read VALUE;
        done
	fi

        search="'WP_POST_REVISIONS'"

        if [[ ${VALUE} =~ [0-9]+$ || ${VALUE} = 'false' ]]; then
	        wpConfigEdit
        else
	        echo -e "$COL_CYAN\nWarning:$COL_RESET Invalid Entry! $VALUE is not a number or false!"
        fi
	;;
### END WP_POST_REVISIONS ###
        *) echo "Something Weird Happened"
        ;;
    esac
done
#Exit if NO is Selected
else
echo -e "$COL_MAGENTA
Warning:$COL_RESET wp-config.php Editor Canceled!"
fi
}

##### END CONFIG OPTIONS #####

function getWPinfo(){
# Get info from the wp globals
dbname=$(wp --skip-plugins --skip-themes eval 'echo DB_NAME;') ;
dbuser=$(wp --skip-plugins --skip-themes eval 'echo DB_USER;') ;
dbpass=$(wp --skip-plugins --skip-themes eval 'echo DB_PASSWORD;') ;
dbhost=$(wp --skip-plugins --skip-themes eval 'echo DB_HOST;') ;
dbprefix=$(wp --skip-plugins --skip-themes eval 'global $wpdb;echo $wpdb->prefix;')

# Alternatly read in vars from wp-config.php
#read -r dbhost dbname dbpass dbuser dbprefix <<< $(cat wp-config.php | egrep "^[^/].*[\"']DB_(NAME|USER|PASSWORD|HOST[^_])|table_prefix" | sort -d | sed "s/.*[\"']\(.*\)[\"'].*;.*/\1/" )
}

function wpphp(){
### CREATE AN INFO.PHP FILE AND GET THE CORRECT VALUES ###
### DATA COLLECTION FROM http://IPADDRESS/~USER
ADDRESS=`hostname`
LOCATION=`pwd`
touch `pwd`/QWPCLI.tmp;
host -t a $ADDRESS > `pwd`/QWPCLI.tmp;
awk '{print $4}' QWPCLI.tmp > QWPCLI.tmp01;
ADDRESS=`cat QWPCLI.tmp01`;
echo $LOCATION > `pwd`/QWPCLI.tmp;
awk -F public_html '{print $2}' QWPCLI.tmp > QWPCLI.tmp01;
LOCATION=`cat QWPCLI.tmp01`;
### END ALT DATA COLLECTION
echo "<?php echo phpversion() ?>" > QWPCLI_version.php #Create PHP Version and Get Value
wpphpverlong=$(curl -s $(echo -e "http://$ADDRESS/~`whoami`$LOCATION")/QWPCLI_version.php)
wpphpver=$(echo $wpphpverlong | cut -c 1-10)
echo $wpphpver
rm -rf QWPCLI.tmp QWPCLI.tmp01 QWPCLI_version.php
}

### Generate php.ini file for existing PHP Version
function phpinigen(){
#Generate ini file
WPPHPVER=$(wpphp | perl -pe's/\.//g' | cut -c 1-2)

if [[ ${WPPHPVER} = "52"* || ${WPPHPVER} = "54"* || ${WPPHPVER} = "56"* || ${WPPHPVER} = "70"* ]]; then  
phpver $WPPHPVER
else
echo -e "$COL_CYAN\nWarning:$COL_RESET Unable to detect PHP Version, using PHP 5.6 for compatibility"
WPPHPVER="56"
phpver $WPPHPVER
fi
}

### WP Boost ###
function wpboostauto(){
#Generate ini file
phpinigen
phpver $WPPHPVER
### BOOST php.ini Values
sed -i "s/.*post_max_size\ .*/post_max_size = 256M/" php.ini
sed -i "s/.*upload_max_filesize\ .*/upload_max_filesize = 256M/" php.ini
sed -i "s/.*max_input_vars\ .*/max_input_vars = 6000/" php.ini
sed -i "s/.*memory_limit\ .*/memory_limit = 512M/" php.ini
sed -i "s/.*max_execution_time\ .*/max_execution_time = 60/" php.ini
echo -e "$COL_GREEN\nSuccess:$COL_RESET php.ini generated for $WPPHPVER"
### BOOST WP MEMORY & ACTIVATE AUTO UPDATE
file='wp-config.php'
match=$(grep table_prefix $file)
search="'WP_MAX_MEMORY_LIMIT'"
VALUE="'512M'"
wpConfigEdit
search="'WP_MEMORY_LIMIT'"
VALUE="'512M'"
wpConfigEdit
search="'WP_AUTO_UPDATE_CORE'"
VALUE="true"
wpConfigEdit
}

function wpboost(){
echo -e "$COL_MAGENTA
The following changes will be made to the website: $COL_RESET
- Prompt to upgrade to PHP 7
- Generate a php.ini file for existing PHP Version
- post_max_size = 256M
- upload_max_filesize = 256M
- max_input_vars = 6000
- memory_limit = 512M
- max_execution_time = 60
- WP_MAX_MEMORY_LIMIT 512M
- WP_MEMORY_LIMIT 512M
- WP_AUTO_UPDATE_CORE true

Continue? y/n
"
read selectBoost && echo ''
case $selectBoost in
        [Yy])
		### PHP 7
		echo -e "\nWould You Like to Upgrade to PHP 7? (y/n)\n"
		read Select && echo ''
		case $Select in
		        [Yy])   phpver && phpver 70
		        ;;
		        *)      echo -e "Moving On!"
		        ;;
		esac
        	wpboostauto
	;;
        *)      echo -e "$COL_CYAN\nNote:$COL_RESET Operation Canceled!"
        ;;
esac
}

function phpver(){
. <(curl -sS https://raw.githubusercontent.com/rowdya22/phpver/master/phpver)
}

### Sideload WP-CLI ###
function wpcliinstall(){
if [ ! -f ~/QWPCLI_cli ]; then
workingDir=$(pwd)
echo -e "\nDo you wish to install a temp copy of WP-CLI? (y) or (n): \c"; read input;
if [ $input == 'y' ]; then
curl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar && chmod +x wp-cli.phar && mv wp-cli.phar ~/QWPCLI_cli && cd && alias wp="$(pwd)/QWPCLI_cli" && cd $workingDir && echo -e "$COL_GREEN\nSuccess: $COL_RESET WP-CLI Installed"

#Automatically remove generated files when session ends
remove_cli_file () { rm -rf ~/QWPCLI_cli; }
( sleep 30m; echo -e "$COL_MAGENTA\nAuto Removal of cli Files Beginning...$COL_RESET"; remove_cli_file ; echo -e "$COL_MAGENTA\nCompleted. Press Enter to Continue...$COL_RESET"; ) &


elif [ $input != 'y' ]; then
echo -e "$COL_CYAN\nWarning:$COL_RESET WP-CLI was not installed"
fi
else
echo -e "$COL_CYAN\nWarning:$COL_RESET WP-CLI is already installed"
fi
}

function wpcliinstallauto(){
if [ ! -f ~/QWPCLI_cli ]; then
workingDir=$(pwd)
curl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar && chmod +x wp-cli.phar && mv wp-cli.phar ~/QWPCLI_cli && cd && alias wp="$(pwd)/QWPCLI_cli" && cd $workingDir && echo -e "$COL_GREEN\nSuccess: $COL_RESET WP-CLI Installed"

#Automatically remove generated files when session ends
remove_cli_file () { rm -rf ~/QWPCLI_cli; }
( sleep 30m; echo -e "$COL_MAGENTA\nAuto Removal of cli Files Beginning...$COL_RESET"; remove_cli_file ; echo -e "$COL_MAGENTA\nCompleted. Press Enter to Continue...$COL_RESET"; ) &

else
echo -e "$COL_CYAN\nWarning:$COL_RESET WP-CLI is already installed"
fi
}

function qwpcliChecks(){
### ONLY RUN CHECKS IF IN WP DIRECTORY ###
if [ -f wp-config.php ]; then

### WPCLI FUNCTIONALITY CHECK ###
CHECK=$(wp --skip-plugins --skip-themes core version | wc -l)
# Output should be only one line. If not throw a warning as WP-CLI likely errored. #
if [ $CHECK != '1' ]; then
echo -e "$COL_MAGENTA
WARNING WPCLI CHECK: [FAILED]

WPCLI is having trouble working. Is WPCLI installed? Try using a temp install by running$COL_CYAN wpcliinstall $COL_RESET"
fi
### END WPCLI FUNCTIONALITY CHECK ###

### START BAD AUTOUPDATE CODE CHECKS ###
checkfile="wp-config.php"
plugsearch="add_filter( 'auto_update_plugin', '__return_true' );"
plugreplace="//add_filter( 'auto_update_plugin', '__return_true' );"
plugline=$(grep "$plugsearch" $checkfile | wc -l)

if [ $plugline != 0 ]; then
echo -e "$COL_MAGENTA\nWarning:$COL_GREEN $plugsearch$COL_RESET exists in the $checkfile file. This line has been commented out to prevent issues."
sed -i "/$plugsearch/c\\$plugreplace" $checkfile
fi

themesearch="add_filter( 'auto_update_theme', '__return_true' );"
themereplace="//add_filter( 'auto_update_theme', '__return_true' );"
themeline=$(grep "$themesearch" $checkfile | wc -l)

if [ $themeline != 0 ]; then
echo -e "$COL_MAGENTA\nWarning:$COL_GREEN $themesearch$COL_RESET exists in the $checkfile file. This line has been commented out to prevent issues."
sed -i "/$themesearch/c\\$themereplace" $checkfile
fi
### END BAD AUTOUPDATE CODE CHECKS ###

### END CHECKS ###
fi
}

function maintCheck(){
### ONLY RUN CHECKS IF IN WP DIRECTORY ###
if [ -f wp-config.php ]; then
### CHECK FOR COMING SOON PAGES ###
if [[ -d "$(pwd)/wp-content/plugins/coming-soon/" ]] || [[ -d "$(pwd)/wp-content/plugins/coming-soon-page/" ]] || [[ -d "$(pwd)/wp-content/plugins/coming-soon-builder/" ]] || [[ -d "$(pwd)/wp-content/plugins/ultimate-landing-page-and-coming-soon-page/" ]] || [[ -d "$(pwd)/wp-content/plugins/rocket-maintenance-mode/" ]] || [[ -d "$(pwd)/wp-content/plugins/simple-maintenance-mode/" ]] || [[ -d "$(pwd)/wp-content/plugins/coming-soon-maintenance-mode-from-acurax/" ]] || [[ -d "$(pwd)/wp-content/plugins/indeed-coming-soon/" ]]; then
echo -e "$COL_MAGENTA
WARNING:
This site may be using a maintenance mode plugin. Some functions may not work \nproperly.  If you have problems disable the plugin and try again. $COL_RESET"
fi
### END COMING SOON CHECK ###
fi
}

function wpconfigCheck(){
if [ ! -f wp-config.php ]; then
echo -e "$COL_MAGENTA
WARNING:
No wp-config.php file found. Make sure you are in a working WordPress directory! $COL_RESET"
fi
}

### Handy Extraction Program ###
function ext(){
    if [ -f $1 ] ; then
        case $1 in
            *.tar.bz2)   tar xvjf $1     ;;
            *.tar.gz)    tar xvzf $1     ;;
            *.bz2)       bunzip2 $1      ;;
            *.rar)       unrar x $1      ;;
            *.gz)        gunzip $1       ;;
            *.tar)       tar xvf $1      ;;
            *.tbz2)      tar xvjf $1     ;;
            *.xz)        tar xvJf $1     ;;
            *.tgz)       tar xvzf $1     ;;
            *.zip)       unzip $1        ;;
            *.Z)         uncompress $1   ;;
            *.7z)        7z x $1         ;;
            *)           echo "$COL_CYAN\nWarning:$COL_RESET'$1' Cannot be extracted! Supported formats are .tar.bz2, .tar.gz, .bz2, .rar, .gz, .tar, .tbz2, .xz, .tgz, .zip, .Z, .7z" ;;
        esac
    else
        echo "'$1' is not a valid file! Syntax:$COL_CYAN ext filename.extention$COL_RESET or$COL_CYAN ext example.tar.gz $COL_RESET"
    fi
}

function wpcleanback(){
find -maxdepth 5 -mtime +30 \( -name "backwpup_*.tar.gz*" -o -name "backwpup_*.zip*" -o -name "backwpup_*.gz*" -o -name "backwpup_*.zi*" \) -exec rm -rv {} \;

if [ -d wp-content/uploads/backupbuddy_backups/ ] ; then
find wp-content/uploads/backupbuddy_backups/ -mtime +30 \( -name "*.zip*" -o -name "*.tar.gz*" -o -name "*.gz*" \) -exec rm -rfv {} \;
rm -rfv zi*
fi

if [ -d wp-content/updraft/ ] ; then
find wp-content/updraft/ -mtime +30 \( -name "*.zip*" -o -name "*.tar.gz*" -o -name "*.gz*" \) -exec rm -rfv {} \;
rm -rfv zi*
fi

if [ -d wp-content/infinitewp/backups/ ] ; then
find wp-content/infinitewp/backups/ -mtime +30 \( -name "*.zip*" -o -name "*.tar.gz*" -o -name "*.gz*" \) -exec rm -rfv {} \;
rm -rfv zi*
fi

if [ -d wp-content/managewp/backups/ ] ; then
find wp-content/managewp/backups/ -mtime +30 \( -name "*.zip*" -o -name "*.tar.gz*" -o -name "*.gz*" \) -exec rm -rfv {} \;
rm -rfv zi*
fi

if [ -d wp-content/plugins/wp-auto-backup/WordPress_BackUps/ ] ; then
find wp-content/plugins/wp-auto-backup/WordPress_BackUps/ -mtime +30 \( -name "*.zip*" -o -name "*.tar.gz*" -o -name "*.gz*" \) -exec rm -rfv {} \;
rm -rfv zi*
fi

if [ -d wp-content/ai1wm-backups/ ] ; then
find wp-content/ai1wm-backups/ -mtime +30 \( -name "*.zip*" -o -name "*.tar.gz*" -o -name "*.gz*" -o -name "*.wpress" \) -exec rm -rfv {} \;
rm -rfv zi*
fi

if [ -d wp-content/backupwordpress-*/ ] ; then
find wp-content/backupwordpress-*/ -mtime +30 \( -name "*.zip*" -o -name "*.tar.gz*" -o -name "*.gz*" \) -exec rm -rfv {} \;
rm -rfv zi*
fi

if [ -d wp-content/plugins/all-in-one-wp-migration/storage/ ] ; then
find wp-content/plugins/all-in-one-wp-migration/storage/ -mtime +30 \( -name "*.zip*" -o -name "*.tar.gz*" -o -name "*.gz*" -o -name "*.wpress" \) -exec rm -rfv {} \;
rm -rfv zi*
fi

if [ -d wp-content/uploads/backup-guard/ ] ; then
find wp-content/uploads/backup-guard/ -mtime +30 \( -name "*.zip*" -o -name "*.tar.gz*" -o -name "*.gz*" -o -name "*.sgbp*" \) -exec rm -rfv {} \;
rm -rfv zi*
fi

if [ -d wp-backup/ ] ; then
find wp-backup/ -mtime +30 \( -name "*.zip*" -o -name "*.tar.gz*" -o -name "*.gz*" \) -exec rm -rfv {} \;
rm -rfv zi*
fi
}

function rmsentmail(){
#/mail/domain/user/sent/folder
find ~/mail/*/*/.Sent*/*/ -mtime +120 -exec rm -rv {} \;
}

function wpreinstall(){
wpReplaceCore
wp --skip-plugins --skip-themes plugin install $(wp --skip-plugins --skip-themes plugin list --field=name) --force
wp --skip-plugins --skip-themes theme install $(wp --skip-plugins --skip-themes theme list --field=name) --force
}

function wpbye(){
gcmd wp --skip-plugins --skip-themes plugin uninstall hello --deactivate
}

function wpglobal(){

#Does user know what their are doing?
dialog --title 'Global Actions Menu' --yesno 'Do you wish to make changes to all WordPress websites?' 6 40
response=$?
if [[ "$response" == '0' ]];then

#Config Options --checklist text height width list-height
cmd=(dialog --title 'What global functions would you like to run?' --separate-output --checklist "Select options:" 22 76 10)
options=(1 "wpfix - rm transients, obj cache, flush permalinks, db cleanup" off    # any option can be set to default to "on"
         2 "wpUpdateInstall - Core, Plugins and Theme" off
         3 "wpboostauto - Raise memory limits and php.ini values" off
         4 "wpReplaceCore - Replace core files with same ersion" off
	 5 "wpRewriteFlush - Flush permalinks" off
	 6 "wpcleanback - rm backups older than 30+ days from popular plugins" off
	 7 "rmsentmail - rm sent email older than 120 days" off
        )
choices=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty)
clear
for choice in $choices
do
    case $choice in
	1) echo -e "\n$COL_BLUE----- wpfix -----$COL_RESET" && gcmd wpfix
	;;
	2) echo -e "\n$COL_BLUE----- wpUpdateInstall -----$COL_RESET" && gcmd wpUpdateInstall
	;;
        3) echo -e "\n$COL_BLUE----- wpboostauto -----$COL_RESET" && gcmd wpboostauto
        ;;
        4) echo -e "\n$COL_BLUE----- wpReplaceCore -----$COL_RESET" && gcmd wpReplaceCore
        ;;
        5) echo -e "\n$COL_BLUE----- wpRewriteFlush -----$COL_RESET" && gcmd wpRewriteFlush
        ;;
        6) echo -e "\n$COL_BLUE----- wpcleanback -----$COL_RESET" && gcmd wpcleanback
        ;;
	7) echo -e "\n$COL_BLUE----- rmsentmail -----$COL_RESET" && rmsentmail
	;;
        *) echo "Something Weird Happened"
        ;;
    esac
done
#Exit if NO is Selected
else
echo -e "$COL_CYAN
Warning:$COL_RESET wpglobal Canceled!"
fi
}

##### END CONFIG OPTIONS #####

#################### GLOABAL FUNCTIONS ####################
function wpglobal_old(){
clear
wpLocation=($(find ~/public_html* -maxdepth 5 -type f -name 'wp-config.php'))
# wpLocation=$DIRS

originalDir=($(pwd))
echo -e "$COL_GREEN
   _______     __        __  ___      __  _
  / ___/ /__  / /  ___ _/ / / _ |____/ /_(_)__  ___  ___
 / (_ / / _ \/ _ \/ _  / / / __ / __/ __/ / _ \/ _ \(_-<
 \___/_/\___/_.__/\_,_/_/ /_/ |_\__/\__/_/\___/_//_/___/
$COL_RESET
What global actions would you like to take?

(1) Replace Core With Existing Version
(2) Install Updates, Flush Rewrite Rules, Flush Cache, Opt & Repair DB
(3) Clear Transients, Optimize/Repair Database
(4) Update Core, Plugins, and Themes
(5) Verify Checksums
(6) Check For Available Updates
(7) Disable (Mojo) Auto Updates
(8) Check Theme/Plugin Conflicts
(9) Overhaul (Replace Core, Flush Permalinks, Flush Cache, Media Regenerate, Opt & Repair DB)
(0) Exit
$COL_MMAGENTA
Want to run another command? use$COL_CYAN gcmd [COMMAND]$COL_MMAGENTA to run any command in all WordPress directories!
$COL_RESET
\tSelection: \c" ;
read globalSelect && echo ''

for ((i = 0; i < ${#wpLocation[@]}; i++))
	do
	case $globalSelect in
	1)	wpgReplaceCore ${wpLocation[$i]}
		(($i+1))
		;;
	2)	wpgWorks ${wpLocation[$i]}
		(($i+1))
		;;
	3)	wpgDB ${wpLocation[$i]}
		(($i+1))
		;;
	4)	wpgUpdate ${wpLocation[$i]}
		(($i+1))
		;;
	5)	wpgVerifyCheck ${wpLocation[$i]}
		(($i+1))
		;;
	6)	wpgCheckUpdate ${wpLocation[$i]}
		(($i+1))
		;;
	7)	wpgAutoUpdate ${wpLocation[$i]}
		(($i+1))
		;;
	8)	wpgEval ${wpLocation[$i]}
		(($i+1))
		;;
	9)	wpgOverhaul ${wpLocation[$i]}
		(($i+1))
		;;
	0)	return;;
	*)	invalidOption;;
	esac

done

echo -e "$COL_GREEN
Success:$COL_RESET Global operation completed.\n"

cd $originalDir
}

function wpgGlobal(){
NOW=$(date +"%Y_%m_%d")
if [ -f error_log ]; then mv error_log error_log.$NOW
fi
### Determine WordPress location
if [ $1 == "wp-config.php" ]; then
	local loc="Current Working Directory"
else
	local loc=${1%wp-config.php*}
fi

### Change to the WordPress location
cd ~/public_html${loc##/home*public_html}
echo -e "\n$COL_BLUE----- Updating $(pwd) -----$COL_RESET"
### Start Global Actions ###
}
############################################################

function wpgReplaceCore(){
wpgGlobal "$@"
### Start Global Actions ###
wpReplaceCore
}

function wpgWorks(){
wpgGlobal "$@"
### Start Global Actions ###
coreLatest
wpworks
}

function wpgDB(){
wpgGlobal "$@"
### Start Global Actions ###
wp --skip-plugins --skip-themes transient delete-expired
wpdbOpt
}

function wpgWSOD(){
wpgGlobal "$@"
### Start Global Actions ###
wpwsod
}

function wpgVerifyCheck(){
wpgGlobal "$@"
### Start Global Actions ###
wpVerifyCheck
}

### Disables Auto Updates For Each Site
function wpgAutoUpdate(){
wpgGlobal "$@"
### Start Global Actions ###
wpAutoUpdate
}

### Displays available updates
function wpgCheckUpdate(){
wpgGlobal "$@"
### Start Global Actions ###
wpCheckUpdate
}

function wpgEval(){
wpgGlobal "$@"
### Start Global Actions ###
wpeval
}

function wpgOverhaul(){
wpgGlobal "$@"
### Start Global Actions ###
wpOverhaul
}

function wpgUpdate(){
wpgGlobal "$@"
### Start Global Actions ###
wp --skip-plugins --skip-themes core update
wp --skip-plugins --skip-themes core update-db
wp --skip-plugins --skip-themes plugin update --all
wp --skip-plugins --skip-themes theme update --all
}

function gcmd(){
### Index WordPress installs
DIRS=$(find ~/public_html* -maxdepth 5 -type f -name 'wp-config.php')
###
for DIR in $DIRS; do
    CDIR=$(dirname $DIR)
    cd $CDIR;
    echo -e "\n$COL_BLUE----- Updating $(pwd) -----$COL_RESET"
    $@;
    cd - >/dev/null
done
}
#################### END GLOABAL FUNCTIONS ####################

#################### START INSTALL FUNCTIONS ####################
function wpinstall(){
clear
echo -e "$COL_GREEN
  _      _____    ____           __         __ __
 | | /| / / _ \  /  _/___   ___ / /_ ___ _ / // /
 | |/ |/ / ___/ _/ / / _ \ (_-</ __// _ \`// // /
 |__/|__/_/    /___//_//_//___/\__/ \_,_//_//_/         "


# accept user input for the databse info
echo -e "$COL_GREEN
This setup will guide you through a manual WordPress install.

Make sure you are in the folder you want to install WordPress and\nthere are no existing WordPress files.\n
$COL_MMAGENTA
---To begin create a database in cPanel and then enter the needed information--- $COL_RESET

Have you created a database in cPanel? (y) or (n)"
read Select && echo''
case $Select in
        [Yy])   echo -e "$COL_GREEN\nGood job you read the instructions!$COL_RESET\n"
	;;
        *)      echo -e "$COL_MAGENTA\nRe-read the instructions above and make the database before proceeding...$COL_RESET\n"
        ;;
esac
echo -e "$COL_GREEN
Database Name (user_dbname): $COL_RESET"
read -e dbname
echo -e "$COL_GREEN
Database User (user_dbuser): $COL_RESET"
read -e dbuser
echo -e "$COL_GREEN
Database Password: $COL_RESET"
read -e dbpass
echo -e "$COL_GREEN
Table Prefix (default: wp_): $COL_RESET"
read -e dbprefix

# download the WordPress core files
wp --skip-plugins --skip-themes core download

# create the wp-config file with our standard setup
wp --skip-plugins --skip-themes core config --dbname=$dbname --dbuser=$dbuser --dbpass=$dbpass --dbprefix=$dbprefix

wp --skip-plugins --skip-themes core install --prompt
wp --skip-plugins --skip-themes plugin uninstall hello --deactivate --quiet

echo -e "$COL_MAGENTA
Now installing suggested plugins and themes.... $COL_RESET"
sleep 2
wpPluginInstall
wpThemeInstall
wp --skip-plugins --skip-themes plugin update --all
wp --skip-plugins --skip-themes theme update --all

echo -e "$COL_MAGENTA
Now disabling user registration, comments, and pingpacks... $COL_RESET"
sleep 2
# read db usr ps pre <<<$(awk -F\' '/DB_/ {print $4}' wp-config.php)
# mysql -u $usr -p$ps -D $db -e "UPDATE wp_options SET option_value = '0' WHERE option_name = 'users_can_register';"
# mysql -u $usr -p$ps -D $db -e "UPDATE wp_options SET option_value='closed' WHERE option_name='default_comment_status';"
# mysql -u $usr -p$ps -D $db -e "UPDATE wp_options SET option_value='closed' WHERE option_name='default_ping_status'; "
# mysql -u $usr -p$ps -D $db -e "UPDATE wp_posts SET comment_status='closed', ping_status='closed';"

wp --skip-plugins --skip-themes option set users_can_register 0
wp --skip-plugins --skip-themes option set default_comment_status closed
wp --skip-plugins --skip-themes option set default_ping_status closed
wp --skip-plugins --skip-themes option set default_pingback_flag 0
wp --skip-plugins --skip-themes option set comment_moderation 1
wp --skip-plugins --skip-themes option set start_of_week 0
wp --skip-plugins --skip-themes option set posts_per_page 5
wp --skip-plugins --skip-themes option set date_format 'j F Y'
wp --skip-plugins --skip-themes option set time_format 'g:i A'

echo -e "$COL_MAGENTA
Now disabling comments and pingbacks on existing content... $COL_RESET"
sleep 1
wp --skip-plugins --skip-themes post update $(wp --skip-plugins --skip-themes post list --format=ids) --comment_status=closed
wp --skip-plugins --skip-themes post update $(wp --skip-plugins --skip-themes post list --format=ids) --ping_status=closed

echo -e "$COL_GREEN
Success:$COL_RESET WordPress installed with recommended plugins and settings."
sleep 3
wpstats
}
#################### END INSTALL FUNCTIONS ####################

#################### START OPTIMIZATION FUNCTIONS ####################
function wpopt(){
clear

echo -e "$COL_GREEN
  _      _____    ____       __  _       _          __  _
 | | /| / / _ \  / __ \___  / /_(_)_ _  (_)__ ___ _/ /_(_)__  ___
 | |/ |/ / ___/ / /_/ / _ \/ __/ /  ' \/ /_ // _  / __/ / _ \/ _ \\
 |__/|__/_/     \____/ .__/\__/_/_/_/_/_//__/\_,_/\__/_/\___/_//_/
                    /_/
$COL_MAGENTA
WARNING: THIS IS AN ADVANCED MENU. MAKE SURE YOU KNOW WHAT YOU ARE DOING! \nCheck if there is existing optimization code in the .htaccess before modifying. If code is duplicated it can cause the site to break. \n $COL_RESET

(1) WP Speed Report
(2) Backup .htaccess
(3) Enable Gzip Compression (.htaccess)
(4) Enable Expired Headers (.htaccess)
(5) Revert Changes
(6) Quick Optimize
(7) Install Recommended Plugins (Manual Setup)
(8) Install Endurance Caching (No Configuration Required)
(9) Exit

\tSelection: \c" ;

read optSelect && echo ''
case $optSelect in
	1)	wpSpeedReport;; #Shows wpspeed optimization report
	2)	wpBackupHtaccess;;
	3)	wpEnableGzip;;
	4)	wpEnableExpiredHeaders;;
	5)	wpUndoOpt;;
	6)	wpQuickOpt;;
	7)	wpOptPlugInstall;;
	8)	wpEnduranceCache;;
	9)	return;;
	*)	invalidOption;;
esac
}

function wpSpeedReport(){
. <(curl -sS https://raw.githubusercontent.com/rowdya22/wpspeed/master/wpspeed)
clear
wpspeed
}

function wpBackupHtaccess(){
# if user would like, make backup
echo -e "\nWould you like to do a full site backup? (y) or (n): \c"; read input;
if [ $input == 'y' ]; then
	wpbackup
elif [ $input != 'y' ]; then
	if [[ ! -f .htaccess ]]; then echo Could not find .htaccess!
	fi
	NOW=$(date +"%Y%m%d_%H%M")
	if [ -f .htaccess ]; then cp .htaccess .QWPCLI_htaccess_preopt
		echo -e "$COL_GREEN
	Current .htaccess backed up to .QWPCLI_htaccess_preopt $COL_RESET \n"
	fi
fi
}

function wpEnableGzip(){
if [[ ! -f .htaccess ]]; then echo Could not find .htaccess!
fi

if [ ! -f .QWPCLI_htaccess_preopt ]; then cp .htaccess .QWPCLI_htaccess_preopt
	echo -e "$COL_GREEN
Current .htaccess backed up to .QWPCLI_htaccess_preopt $COL_RESET \n"
fi

if [ -f .htaccess ]; then
echo -e "\n
########## Enable Gzip Compression Start ##########
<ifmodule mod_deflate.c>

AddOutputFilterByType DEFLATE image/gif image/png image/jpeg image/x-icon application/pdf application/javascript application/x-javascript text/plain text/html text/css text/x-component text/xml application/json </ifmodule>
########## End Enable Gzip Compression ##########" >> .htaccess

echo -e "$COL_GREEN
Success:$COL_RESET Gzip Compression code added to .htaccess\n"
fi
}

function wpEnableExpiredHeaders(){
if [[ ! -f .htaccess ]]; then echo Could not find .htaccess!
fi

if [ ! -f .QWPCLI_htaccess_preopt ]; then cp .htaccess .QWPCLI_htaccess_preopt
	echo -e "$COL_GREEN
Current .htaccess backed up to .QWPCLI_htaccess_preopt $COL_RESET \n"
fi

if [ -f .htaccess ]; then
echo -e "\n
########## Add Leverage Browser Caching ##########
AddType image/x-icon .ico

<IfModule mod_headers.c>
# YEAR
<FilesMatch \".(ico|gif|jpg|jpeg|png|flv|pdf)$\">
 Header set Cache-Control "max-age=29030400"
</FilesMatch>
# WEEK
<FilesMatch \".(js|css|swf)$\">
 Header set Cache-Control "max-age=604800"
</FilesMatch>
# 24 HOURS
<FilesMatch \".(html|htm|txt|php)$\">
 Header set Cache-Control "max-age=86400"
</FilesMatch>
</IfModule>
########## End Leverage Browser Caching ##########" >> .htaccess

echo -e "$COL_GREEN
Success:$COL_RESET Leverage Browser Caching code added to .htaccess\n"
fi
}

function wpUndoOpt(){
if [[ -f QWPCLI_BACKUP_* ]]; then
	tar -zxvf QWPCLI_BACKUP_* --strip-components=1
fi

if [[ ! -f QWPCLI_BACKUP_* ]]; then

	if [[ ! -f .QWPCLI_htaccess_preopt ]]; then echo Could not find .htaccess backup!
	fi

	if [[ -f .QWPCLI_htaccess_preopt ]]; then
	mv .htaccess .QWPCLI_htaccess_opt
	mv .QWPCLI_htaccess_preopt .htaccess

	echo -e "$COL_GREEN
	\rSuccess:$COL_RESET .htaccess file reset from backup\n"
	fi
fi
}

function wpQuickOpt(){
wpBackupHtaccess
wpEnableGzip
wpEnableExpiredHeaders
wpEnduranceCache
}

function wpOptPlugInstall(){
wpEnduranceCache
wp --skip-plugins --skip-themes plugin install wp-optimize ewww-image-optimizer --activate

echo -e "\nBe sure to configure wp-optimize & ewww-image-optimizer\n"
}

#################### END OPTIMIZATION FUNCTIONS ####################

#################### START WP-TOOLS FUNCTIONS ####################
function wptools(){
clear
echo -e "$COL_GREEN
  _      _____    ______          __
 | | /| / / _ \  /_  __/__  ___  / /__
 | |/ |/ / ___/   / / / _ \/ _ \/ (_-<
 |__/|__/_/      /_/  \___/\___/_/___/
$COL_MGREEN
This menu allows you to tap into the power of WordPress Tools. To skip the menu,
type$COL_CYAN wptools$COL_MGREEN and press tab twice to view options.$COL_MAGENTA All actions viewable in the
WordPress Tools GUI.$COL_MGREEN Choose a Function below:$COL_RESET

(1) Backup  - Backup site through WordPress Tools (May not include all content)
(2) Restore - Restore site & database from existing WordPress Tools backup
(3) Upgrade - Backup and update site, plugins, themes. If errors exist revert.
(4) Exit

\tSelection: \c" ;

read toolsSelect && echo ''
case $toolsSelect in
	1)	wptoolsbackup;;
	2)	wptoolsrestore;;
	3)	wptoolsupgrade;;
	4)	return;;
	*)	invalidOption;;
esac
}

function wptoolsbackup(){
DIR=$(pwd)
HASHDIR="$(echo "$(dirs)" | cut -d "~" -f 2)/"
WPDIR="$(echo "$(dirs)" | sed 's/^..//' )/"
BACKUPDIR=$(perl -e'my $a = unpack "H*", "$ARGV[0]"; print $a;' $HASHDIR)

echo -e "$COL_GREEN
Backup running... $COL_RESET"
cd ~
wp-tools backup --force --path=$WPDIR --backupdir=backupwordpress/$BACKUPDIR --wp-cli="/usr/php/54/usr/bin/php-cli -c /etc/wp-cli/php.ini /usr/local/bin/wp"
cd $DIR
}

function wptoolsrestore(){
DIR=$(pwd)
WPPATH="/$(echo "$(dirs)" | sed 's/^..//' )/"
HASHDIR=$(perl -e'my $a = unpack "H*", $ARGV[0];print $a;' $WPPATH)

cd ~
WPFILES="backupwordpress/$HASHDIR/*.tar.gz"

for i in $WPFILES; do

    TIME=$(perl -e'
    my $file = $ARGV[0];
    my ($time) = $file =~ /wp_backup(\d+)/;
    my $date = "date -d\@$time";
    print `$date`;
    ' $i)

    MANIFEST=$(dd bs=8192 count=1 if=$i 2>/dev/null | tar -xOz wp_backup.MANIFEST 2>/dev/null)
    THINGS=$(echo $MANIFEST | tr " " "\n")

    echo $TIME
    for thing in $THINGS; do
        echo $thing
    done
    echo ""

done

echo -e "Enter epoch time of the restore point (e.g. time:$COL_MAGENTA 1339826400$COL_RESET):" ; read TIMESTAMP

wp-tools restore --force --backupfile=backupwordpress/$HASHDIR/wp_backup$TIMESTAMP.tar.gz --wp-cli="/usr/php/54/usr/bin/php-cli -c /etc/wp-cli/php.ini /usr/local/bin/wp"

cd $DIR
}

function wptoolsupgrade(){
#Required Syntax: wp-tools upgrade --path=public_html/site --backupdir=backupwordpress/$BACKUPDIR --wp-cli="/usr/php/54/usr/bin/php-cli -c /etc/wp-cli/php.ini /usr/local/bin/wp"

DIR=$(pwd)
HASHDIR="$(echo "$(dirs)" | cut -d "~" -f 2)/"
WPDIR="$(echo "$(dirs)" | sed 's/^..//' )/"
BACKUPDIR=$(perl -e'my $a = unpack "H*", "$ARGV[0]"; print $a;' $HASHDIR)

if [ ! -f .automatic_updates_disabled ]; then
echo -e "$COL_GREEN
Upgrade running... $COL_RESET"
cd ~
wp-tools upgrade --force --path=$WPDIR --backupdir=backupwordpress/$BACKUPDIR --wp-cli="/usr/php/54/usr/bin/php-cli -c /etc/wp-cli/php.ini /usr/local/bin/wp"
cd $DIR
else
echo -e "$COL_MAGENTA UPDATE FUNCTIONS DISABLED as long as .automatic_updates_disabled Exists! $COL_RESET"
fi
}

#################### END WP-TOOLS FUNCTIONS ####################

###

#################### UNDER CONSTRUCTION ####################
function wpGlobalTemplate(){
wpLocation=($(find ~/public_html -maxdepth 5 -type f -name 'wp-config.php'))
originalDir=($(pwd))
for ((i = 0; i < ${#wpLocation[@]}; i++))
	do
		functionname ${wpLocation[$i]}
		(($i+1))
	done
echo -e "$COL_GREEN
Success:$COL_RESET Operation completed.\n"

cd $originalDir
}

function wpRevert(){
# Get info from the wp globals
getWPinfo

echo -e "$COL_GREEN\nThis function will look for and restore QWPCLI_BACKUP.tar.gz or QWPCLI_CORE.tar.gz. If multiple BACKUP or CORE files exist you will get an error. Please confirm that only 1 possible file type exists:

(1) Yes
(2) No $COL_RESET"
read select;
case $select in
1)
if [ ! -e QWPCLI_BACKUP_* ] && [ ! -e QWPCLI_CORE_* ]; then
echo -e "$COL_MAGENTA
Warning:$COL_RESET No backup found!\n"
fi

if [ -e QWPCLI_BACKUP_* ]; then
	tar -zxvf QWPCLI_BACKUP_* --strip-components=1
	wp --skip-plugins --skip-themes db import QWPCLI_"$dbname"_*
	rm -rf QWPCLI_BACKUP_* QWPCLI_"$dbname"_*
	wp --skip-plugins --skip-themes core update-db --quiet
	echo -e "$COL_GREEN\nSuccess:$COL_RESET Files and Database restored from backup.\n"
else
	if [ -e QWPCLI_CORE_* ]; then
		tar -zxvf QWPCLI_CORE_* --strip-components=1
		rm -rf QWPCLI_CORE_*
		echo -e "$COL_GREEN\nSuccess:$COL_RESET Core files restored from backup.\n"
	fi
fi
;;
*)  echo -e "$COL_CYAN\nWarning:$COL_RESET Operation halted! No files reverted"
;;
esac
}

###COMMAND MENU###
function BETAwpconfig(){
#Does user know what their are doing?
dialog --title 'BETA TEST' --yesno 'This is an advanced menu. Do you wish to continue?' 6 30
response=$?
#response=0
if [[ "$response" == '0' ]];then

#COLLECT FEEDBACK
dialog --title 'NOTE' --msgbox 'If you know of a function or customization you would want added let me know!' 7 30

#Config Options --checklist text height width list-height
cmd=(dialog --title 'Which features would you like to edit?' --separate-output --checklist "Select options:" 22 76 10)
options=(1 "Toggle Comments" off    # any option can be set to default to "on"
         2 "Toggle User Registration" off
         3 "Enable/Update Endurance Caching" off
         4 "Install/Update Mojo Plugin" off
	 5 "Update Core/Plugins/Themes/Disable" off
	 6 "Optimize/Repair DB" off
	 7 "Adjust Posts Per Page" off
	 8 "Update PHP Version" off
	 9 "Edit php.ini" off
	 10 "Speed Test" off
	 11 "Backup Files & DB" off
	)
choices=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty)
clear
for choice in $choices
do
    case $choice in
        1) echo -e "\n$COL_BLUE----- Toggle Comments -----$COL_RESET"
		echo -e "$COL_GREEN\rTurn Comments for future posts ON or OFF?\n1) ON\n2) OFF\n3) Disable Comments on ALL Content\n4) Exit\n $COL_RESET" ; read select;
                case $select in
                        1) wp --skip-plugins --skip-themes option update default_comment_status open
                        ;;
                        2) wp --skip-plugins --skip-themes option update default_comment_status closed
	                ;;
			3) dbprefix=$(wp --skip-plugins --skip-themes eval "global $wpdb;echo $wpdb->prefix;")
			   wp --skip-plugins --skip-themes option update default_comment_status closed
			   wp -skip-plugins --skip-themes db query "UPDATE ${dbprefix}posts SET comment_status='closed';"
			;;
			4) echo -e "$COL_MAGENTA\nWarning:$COL_RESET Operation Canceled!"
			;;
                        *) invalidOption;;
                esac
        ;;
	2) echo -e "\n$COL_BLUE----- Toggle User Registration -----$COL_RESET"
		echo -e "$COL_GREEN\rTurn user registration ON or OFF?\n1) ON\n2) OFF\n3) Exit\n $COL_RESET" ; read select;
		case $select in
			1) wp --skip-plugins --skip-themes option update users_can_register 1
			;;
			2) wp --skip-plugins --skip-themes option update users_can_register 0
			;;
                        3) echo -e "$COL_MAGENTA\nWarning:$COL_RESET Operation Canceled!"
                        ;;
			*) invalidOption;;
		esac
	;;
        3) echo -e "\n$COL_BLUE----- Enable/Update Endurance Caching -----$COL_RESET"
		wpEnduranceCache
	;;
        4) echo -e "\n$COL_BLUE----- Install/Update Mojo Plugin -----$COL_RESET"
		wpMojoInstall
	;;
        5) echo -e "\n$COL_BLUE----- Update Core/Plugins/Themes/Disable -----$COL_RESET"
		wpupdate
	;;
        6) echo -e "\n$COL_BLUE----- Optimize/Repair DB -----$COL_RESET"
		wpfix
	;;
        7) echo -e "\n$COL_BLUE----- Adjust Posts Per Page -----$COL_RESET"
		echo -e "$COL_GREEN\rSet value for posts per page$COL_MAGENTA (numeric value only!)$COL_RESET\nPosts Per Page: "; read NUM
		wp option update posts_per_page $NUM
	;;
        8) echo -e "\n$COL_BLUE----- Update PHP Version -----$COL_RESET"
		#Add prompt for version and run silently
		phpver
	;;
        9) echo -e "\n$COL_BLUE----- Edit php.ini -----$COL_RESET"
		editini
	;;
        10) echo -e "\n$COL_BLUE----- Speed Test -----$COL_RESET"
          	echo "Speed Test Comming Soon!"
	;;
	11) echo -e "\n$COL_BLUE----- Backup Files & DB -----$COL_RESET"
		wpbackup
	;;
        *) echo "Something Weird Happened"
	;;
    esac
done
#Exit if NO is Selected
else
echo -e "$COL_MAGENTA
Warning:$COL_RESET Config Canceled!"
fi
}
#################### END UNDER CONSTRUCTION ####################

#################### START LAUNCH ####################
echo -e "\n\n   Quick WP-CLI commands added to current SSH session. For menu, type$COL_CYAN qwpcli$COL_RESET."

### MOVE ERROR LOG AS WPCLI DELETES IT OFTEN ###
NOW=$(date +"%Y_%m_%d-%H%M")
if [ -f error_log ]; then mv error_log error_log.$NOW
fi
### END ERROR LOG RENAME ###

### SHOW MENU ON STARTUP ###
qwpcli

#/tmp FOLDER CHECK #
if [ -d /tmp ]; then
	TMPFOLDER=$(df -h /tmp | awk '{if ($1 != "Filesystem") print $5}' | tr -d %)
	if (("$TMPFOLDER" >= 90 )); then
	echo -e "$COL_CYAN\nWarning:$COL_RESET /tmp folder is $TMPFOLDER % full. Clear space to prevent possible issues."
	fi
fi
#################### END LAUNCH ####################
